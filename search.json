[
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html#header-2",
    "href": "content/02_notes/05_class_notes.html#header-2",
    "title": "Class Notes",
    "section": "Header 2",
    "text": "Header 2\n\nHeader 3\n\nHeader 4\n\nHeader 5\n\nHeader 6"
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/AML1/aml1.html",
    "href": "content/AML1/aml1.html",
    "title": "Automated ML with H20 I",
    "section": "",
    "text": "Use your learning from descriptive features and plot_ggpairs() to further investigate the features. Run the functions above according to the features needed. Answer the following questions. Most of the time, you will only need the images from diagonal."
  },
  {
    "objectID": "content/AML1/aml1.html#compensation-features",
    "href": "content/AML1/aml1.html#compensation-features",
    "title": "Automated ML with H20 I",
    "section": "4.1 Compensation Features",
    "text": "4.1 Compensation Features\n\nInteraction between Monthly Income and Attrition\nThe Answer would be C, because we see the Spike below 5000 with Yes.\n\nemployee_attrition_tbl %&gt;%\n    select(Attrition, MonthlyIncome) %&gt;%\n    plot_ggpairs(Attrition)\n\n#&gt; Warning: `aes_string()` was deprecated in ggplot2 3.0.0.\n#&gt; ℹ Please use tidy evaluation idioms with `aes()`.\n#&gt; ℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\n\n\n\n\n\n\n\n\n\nInteraction between Percent Salary Hike and Attrition\nThe answer would be D, because the graphs for Yes and No are largely similar.\n\nemployee_attrition_tbl %&gt;%\n    select(Attrition, PercentSalaryHike) %&gt;%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\n\nInteraction between Stock Option Level and Attrition\nThe Answer would be B or C, because we can see that the majority of the people with 1 or 2 Stock Options are staying, but with 3 Stock Options they are the same and 0 Stock Options the would more likely have Attrition.\n\nemployee_attrition_tbl %&gt;%\n    select(Attrition, StockOptionLevel) %&gt;%\n    plot_ggpairs(Attrition)"
  },
  {
    "objectID": "content/AML1/aml1.html#survey-results",
    "href": "content/AML1/aml1.html#survey-results",
    "title": "Automated ML with H20 I",
    "section": "4.2 Survey Results",
    "text": "4.2 Survey Results\n\nInteraction between Environment Satisfaction and Attrition\nThe Answer would be C, because the Graph for Attrition Yes is similar in all levels of satisfaction.\n\nemployee_attrition_tbl %&gt;%\n    select(Attrition, EnvironmentSatisfaction) %&gt;%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\n\nInteraction between Work Life Balance and Attrition\nThe answer would be B and C, because we can see the spikes of 2’s and 3’s for both Yes and No\n\nemployee_attrition_tbl %&gt;%\n    select(Attrition, WorkLifeBalance) %&gt;%\n    plot_ggpairs(Attrition)"
  },
  {
    "objectID": "content/AML1/aml1.html#performance-data",
    "href": "content/AML1/aml1.html#performance-data",
    "title": "Automated ML with H20 I",
    "section": "4.3 Performance Data",
    "text": "4.3 Performance Data\n\nInteraction between Job Involvement and Attrition\nThe answer would be between A and B because the lower density happens at the 1’s and 4’s.\n\nemployee_attrition_tbl %&gt;%\n    select(Attrition, JobInvolvement) %&gt;%\n    plot_ggpairs(Attrition)"
  },
  {
    "objectID": "content/AML1/aml1.html#work-life-features",
    "href": "content/AML1/aml1.html#work-life-features",
    "title": "Automated ML with H20 I",
    "section": "4.4 Work-Life Features",
    "text": "4.4 Work-Life Features\n\nInteraction between Over Time and Attrition\nThe answer would be B, because we can see that the red portion is larger than the blue portion.\n\nemployee_attrition_tbl %&gt;%\n    select(Attrition, OverTime) %&gt;%\n    plot_ggpairs(Attrition)"
  },
  {
    "objectID": "content/AML1/aml1.html#training-and-education",
    "href": "content/AML1/aml1.html#training-and-education",
    "title": "Automated ML with H20 I",
    "section": "4.5 Training and Education",
    "text": "4.5 Training and Education\n\nInteraction between Training Times Last Year and Attrition\nThe answer is C, because both graphs for Yes and No are similar.\n\nemployee_attrition_tbl %&gt;%\n    select(Attrition, TrainingTimesLastYear) %&gt;%\n    plot_ggpairs(Attrition)"
  },
  {
    "objectID": "content/AML1/aml1.html#time-based-features",
    "href": "content/AML1/aml1.html#time-based-features",
    "title": "Automated ML with H20 I",
    "section": "4.6 Time-Based Features",
    "text": "4.6 Time-Based Features\n\nInteraction between Years At Company and Attrition\nThe answer would be B, which we can the on the spike at the beginning of the graph for Years &lt; 10.\n\nemployee_attrition_tbl %&gt;%\n    select(Attrition, YearsAtCompany) %&gt;%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\n\nInteraction between Years Since Last Promotion and Attrition\nThe answer would be C, because both graphs are similar, just with Yes having a bigger spike at the beginning.\n\nemployee_attrition_tbl %&gt;%\n    select(Attrition, YearsSinceLastPromotion) %&gt;%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\nCongratulations! You are done with the 3rd challenge!"
  },
  {
    "objectID": "content/AML2/aml2.html",
    "href": "content/AML2/aml2.html",
    "title": "Automated ML with H20 II",
    "section": "",
    "text": "For the challenge, we shall be working with a Product Backorders dataset. The goal here is to predict whether or not a product will be put on backorder status, given a number of product metrics such as current inventory, transit time, demand forecasts and prior sales. It’s a classic Binary Classification problem. The dataset can be accessed from here:"
  },
  {
    "objectID": "content/AML2/aml2.html#loading-and-splitting",
    "href": "content/AML2/aml2.html#loading-and-splitting",
    "title": "Automated ML with H20 II",
    "section": "4.1 Loading and Splitting",
    "text": "4.1 Loading and Splitting\n\nproduct_proc_tbl &lt;- product_tbl %&gt;%\n  mutate_if(is.character, as.factor)\n\nsplit_product_tbl &lt;- initial_split(product_proc_tbl, prop = 0.8)\ntrain_tbl &lt;- training(split_product_tbl)\ntest_tbl &lt;- testing(split_product_tbl)"
  },
  {
    "objectID": "content/AML2/aml2.html#specify-the-response-and-predictor-variables",
    "href": "content/AML2/aml2.html#specify-the-response-and-predictor-variables",
    "title": "Automated ML with H20 II",
    "section": "4.2 Specify the response and predictor variables",
    "text": "4.2 Specify the response and predictor variables\n\n# Try Ctrl+Shift+F10, if a cache error occurs\nrecipe_product &lt;- \n  recipe(went_on_backorder ~ ., data = train_tbl) %&gt;%\n  step_zv(all_predictors()) %&gt;%\n  update_role(sku, new_role = \"ID\") %&gt;%\n  prep()\n\ntrain_bake &lt;- bake(recipe_product, new_data = train_tbl)\ntest_bake &lt;- bake(recipe_product, new_data = test_tbl)"
  },
  {
    "objectID": "content/AML2/aml2.html#run-automl-specifying-the-stopping-criterion",
    "href": "content/AML2/aml2.html#run-automl-specifying-the-stopping-criterion",
    "title": "Automated ML with H20 II",
    "section": "4.3 run AutoML specifying the stopping criterion",
    "text": "4.3 run AutoML specifying the stopping criterion\n\nh2o.init()\n\n#&gt; \n#&gt; H2O is not running yet, starting it now...\n#&gt; \n#&gt; Note:  In case of errors look at the following log files:\n#&gt;     C:\\Users\\docla\\AppData\\Local\\Temp\\Rtmp4KWFah\\file11d86ef019e3/h2o_docla_started_from_r.out\n#&gt;     C:\\Users\\docla\\AppData\\Local\\Temp\\Rtmp4KWFah\\file11d8262b209c/h2o_docla_started_from_r.err\n#&gt; \n#&gt; \n#&gt; Starting H2O JVM and connecting:  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         1 seconds 862 milliseconds \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.40.0.4 \n#&gt;     H2O cluster version age:    1 month and 16 days \n#&gt;     H2O cluster name:           H2O_started_from_R_docla_sco633 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   3.99 GB \n#&gt;     H2O cluster total cores:    8 \n#&gt;     H2O cluster allowed cores:  8 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_bake), ratios = c(0.8), seed = 2597)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o &lt;- as.h2o(test_bake)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\n\n\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |===                                                                   |   4%\n#&gt; 18:50:11.617: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#&gt; 18:50:11.639: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |========                                                              |  12%\n  |                                                                            \n  |=============                                                         |  19%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |===========================                                           |  39%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |=====================================                                 |  54%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |==========================================================            |  83%\n  |                                                                            \n  |================================================================      |  91%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%"
  },
  {
    "objectID": "content/AML2/aml2.html#view-the-leaderboard-and-save-best-model",
    "href": "content/AML2/aml2.html#view-the-leaderboard-and-save-best-model",
    "title": "Automated ML with H20 II",
    "section": "4.4 View the leaderboard and Save best Model",
    "text": "4.4 View the leaderboard and Save best Model\n\nh2o_leaderboard &lt;- automl_models_h2o@leaderboard\n#h2o_leaderboard %&gt;% \n#  extract_h2o_model_name_by_position(4) %&gt;% \n#  h2o.getModel() %&gt;%\n#  h2o.saveModel(path = \"../Models\", force = TRUE)\nh2o_leaderboard\n\n#&gt;                                                  model_id       auc   logloss\n#&gt; 1    StackedEnsemble_AllModels_1_AutoML_1_20230613_185011 0.9436543 0.1823829\n#&gt; 2 StackedEnsemble_BestOfFamily_2_AutoML_1_20230613_185011 0.9425340 0.1832293\n#&gt; 3 StackedEnsemble_BestOfFamily_1_AutoML_1_20230613_185011 0.9419901 0.1842031\n#&gt; 4                          GBM_1_AutoML_1_20230613_185011 0.9419574 0.1838644\n#&gt; 5                          GBM_3_AutoML_1_20230613_185011 0.9404298 0.1939643\n#&gt; 6                          GBM_4_AutoML_1_20230613_185011 0.9391844 0.1968102\n#&gt;       aucpr mean_per_class_error      rmse        mse\n#&gt; 1 0.7056913            0.1644858 0.2344828 0.05498219\n#&gt; 2 0.7074654            0.1655969 0.2354412 0.05543254\n#&gt; 3 0.7049835            0.1707759 0.2360045 0.05569812\n#&gt; 4 0.7055861            0.1707759 0.2356272 0.05552017\n#&gt; 5 0.7027824            0.1680469 0.2378886 0.05659100\n#&gt; 6 0.6908921            0.1588000 0.2398683 0.05753680\n#&gt; \n#&gt; [11 rows x 7 columns]"
  },
  {
    "objectID": "content/AML2/aml2.html#predicting-using-leader-model",
    "href": "content/AML2/aml2.html#predicting-using-leader-model",
    "title": "Automated ML with H20 II",
    "section": "4.5 Predicting using Leader Model",
    "text": "4.5 Predicting using Leader Model\n\nprediction_tbl &lt;- \n  h2o_leaderboard %&gt;% \n  extract_h2o_model_name_by_position(1) %&gt;% \n  h2o.getModel() %&gt;% \n  h2o.predict(newdata = test_h2o) %&gt;%\n  as.tibble()\n\n#&gt; Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#&gt; ℹ Please use `as_tibble()` instead.\n#&gt; ℹ The signature and semantics have changed, see `?as_tibble`.\n\n\n#&gt; StackedEnsemble_AllModels_1_AutoML_1_20230613_185011\n\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntest_bake &lt;- test_bake %&gt;%\n  mutate(\"ID\" = row_number())\n\nprediction_tbl &lt;- prediction_tbl %&gt;%\n  mutate(\"ID\" = row_number()) %&gt;%\n  left_join(test_bake) %&gt;%\n  select(-ID)\n\n#&gt; Joining with `by = join_by(ID)`\n\nprediction_tbl\n\n\n\n  \n\n\nh2o.shutdown(prompt = FALSE)\n\nCongratulations! You are done with the 4th challenge!"
  },
  {
    "objectID": "content/BBModels/bbmodels.html",
    "href": "content/BBModels/bbmodels.html",
    "title": "Supervised ML - Regression",
    "section": "",
    "text": "This is a two part challenge:\nPart 1: Recreate plot_features(). Take the explanation data and use the first case to create a plot similar to the output of plot_features().\nexplanation %&gt;% as.tibble()\ncase_1 &lt;- explanation %&gt;% filter(case == 1)\ncase_1 %&gt;% plot_features() You will need at least the layers geom_col() and coord_flip().\nBonus Objectives:\nGet your custom plot_features() function to scale to multiple cases Use theme arguments to modify the look of the plot Part 2: Recreate plot_explanations():\nTake the full explanation data and recreate the second plot.\nYou will need at least the layers geom_tile() and facet_wrap()."
  },
  {
    "objectID": "content/BBModels/bbmodels.html#specify-the-response-and-predictor-variables",
    "href": "content/BBModels/bbmodels.html#specify-the-response-and-predictor-variables",
    "title": "Supervised ML - Regression",
    "section": "Specify the response and predictor variables",
    "text": "Specify the response and predictor variables\n\nrecipe_product &lt;- \n  recipe(went_on_backorder ~ ., data = train_tbl) %&gt;%\n  step_zv(all_predictors()) %&gt;%\n  update_role(sku, new_role = \"ID\") %&gt;%\n  prep()\n\ntrain_bake &lt;- bake(recipe_product, new_data = train_tbl)\ntest_bake &lt;- bake(recipe_product, new_data = test_tbl)"
  },
  {
    "objectID": "content/BBModels/bbmodels.html#automl",
    "href": "content/BBModels/bbmodels.html#automl",
    "title": "Supervised ML - Regression",
    "section": "AutoML",
    "text": "AutoML\n\nh2o.init()\n\n\nH2O is not running yet, starting it now...\n\nNote:  In case of errors look at the following log files:\n    C:\\Users\\docla\\AppData\\Local\\Temp\\RtmpknkS5Q\\filebc851379b/h2o_docla_started_from_r.out\n    C:\\Users\\docla\\AppData\\Local\\Temp\\RtmpknkS5Q\\filebc861c75fe7/h2o_docla_started_from_r.err\n\n\nStarting H2O JVM and connecting:  Connection successful!\n\nR is connected to the H2O cluster: \n    H2O cluster uptime:         1 seconds 775 milliseconds \n    H2O cluster timezone:       Europe/Berlin \n    H2O data parsing timezone:  UTC \n    H2O cluster version:        3.40.0.4 \n    H2O cluster version age:    1 month and 16 days \n    H2O cluster name:           H2O_started_from_R_docla_elk288 \n    H2O cluster total nodes:    1 \n    H2O cluster total memory:   3.99 GB \n    H2O cluster total cores:    8 \n    H2O cluster allowed cores:  8 \n    H2O cluster healthy:        TRUE \n    H2O Connection ip:          localhost \n    H2O Connection port:        54321 \n    H2O Connection proxy:       NA \n    H2O Internal Security:      FALSE \n    R Version:                  R version 4.3.0 (2023-04-21 ucrt) \n\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_bake), ratios = c(0.8), seed = 2597)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o &lt;- as.h2o(test_bake)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\n\nleader_h2o &lt;- h2o.loadModel(\"../Models/StackedEnsemble_AllModels_1_AutoML_1_20230613_132849\")"
  },
  {
    "objectID": "content/BBModels/bbmodels.html#explainer",
    "href": "content/BBModels/bbmodels.html#explainer",
    "title": "Supervised ML - Regression",
    "section": "Explainer",
    "text": "Explainer\n\nexplainer &lt;- train_tbl %&gt;%\n    select(-went_on_backorder) %&gt;%\n    lime(\n        model           = leader_h2o,\n        bin_continuous  = TRUE,\n        n_bins          = 4,\n        quantile_bins   = TRUE\n    )\n\nWarning: in_transit_qty does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: pieces_past_due does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: local_bo_qty does not contain enough variance to use quantile binning.\nUsing standard binning instead.\n\nexplainer\n\n$model\nModel Details:\n==============\n\nH2OBinomialModel: stackedensemble\nModel ID:  StackedEnsemble_AllModels_1_AutoML_1_20230613_132849 \nModel Summary for Stacked Ensemble: \n                                    key            value\n1                     Stacking strategy cross_validation\n2  Number of base models (used / total)              4/6\n3      # GBM base models (used / total)              3/4\n4      # DRF base models (used / total)              1/1\n5      # GLM base models (used / total)              0/1\n6                 Metalearner algorithm              GLM\n7    Metalearner fold assignment scheme           Random\n8                    Metalearner nfolds                5\n9               Metalearner fold_column               NA\n10   Custom metalearner hyperparameters             None\n\n\nH2OBinomialMetrics: stackedensemble\n** Reported on training data. **\n\nMSE:  0.03015203\nRMSE:  0.1736434\nLogLoss:  0.1085087\nMean Per-Class Error:  0.0863238\nAUC:  0.9860569\nAUCPR:  0.9220199\nGini:  0.9721139\n\nConfusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n         No  Yes    Error       Rate\nNo     8555  224 0.025515  =224/8779\nYes     177 1026 0.147132  =177/1203\nTotals 8732 1250 0.040172  =401/9982\n\nMaximum Metrics: Maximum metrics at their respective thresholds\n                        metric threshold       value idx\n1                       max f1  0.400437    0.836527 178\n2                       max f2  0.195475    0.872602 245\n3                 max f0point5  0.620875    0.871935 117\n4                 max accuracy  0.508510    0.960629 148\n5                max precision  0.994382    1.000000   0\n6                   max recall  0.024546    1.000000 345\n7              max specificity  0.994382    1.000000   0\n8             max absolute_mcc  0.400437    0.813831 178\n9   max min_per_class_accuracy  0.202840    0.937350 242\n10 max mean_per_class_accuracy  0.195475    0.940333 245\n11                     max tns  0.994382 8779.000000   0\n12                     max fns  0.994382 1202.000000   0\n13                     max fps  0.000372 8779.000000 399\n14                     max tps  0.024546 1203.000000 345\n15                     max tnr  0.994382    1.000000   0\n16                     max fnr  0.994382    0.999169   0\n17                     max fpr  0.000372    1.000000 399\n18                     max tpr  0.024546    1.000000 345\n\nGains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\nH2OBinomialMetrics: stackedensemble\n** Reported on validation data. **\n\nMSE:  0.04851357\nRMSE:  0.220258\nLogLoss:  0.1625482\nMean Per-Class Error:  0.1263632\nAUC:  0.9572626\nAUCPR:  0.758559\nGini:  0.9145252\n\nConfusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n         No Yes    Error       Rate\nNo     2500 136 0.051593  =136/2636\nYes      71 282 0.201133    =71/353\nTotals 2571 418 0.069254  =207/2989\n\nMaximum Metrics: Maximum metrics at their respective thresholds\n                        metric threshold       value idx\n1                       max f1  0.301733    0.731518 199\n2                       max f2  0.156097    0.800000 254\n3                 max f0point5  0.507966    0.735003 136\n4                 max accuracy  0.449943    0.935764 156\n5                max precision  0.976778    1.000000   0\n6                   max recall  0.011360    1.000000 368\n7              max specificity  0.976778    1.000000   0\n8             max absolute_mcc  0.301733    0.695345 199\n9   max min_per_class_accuracy  0.133528    0.899090 266\n10 max mean_per_class_accuracy  0.136709    0.900071 264\n11                     max tns  0.976778 2636.000000   0\n12                     max fns  0.976778  350.000000   0\n13                     max fps  0.000414 2636.000000 399\n14                     max tps  0.011360  353.000000 368\n15                     max tnr  0.976778    1.000000   0\n16                     max fnr  0.976778    0.991501   0\n17                     max fpr  0.000414    1.000000 399\n18                     max tpr  0.011360    1.000000 368\n\nGains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\nH2OBinomialMetrics: stackedensemble\n** Reported on cross-validation data. **\n** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n\nMSE:  0.05002334\nRMSE:  0.223659\nLogLoss:  0.1686964\nMean Per-Class Error:  0.153548\nAUC:  0.9525321\nAUCPR:  0.7552888\nGini:  0.9050642\n\nConfusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n          No  Yes    Error        Rate\nNo     10270  522 0.048369  =522/10792\nYes      378 1083 0.258727   =378/1461\nTotals 10648 1605 0.073451  =900/12253\n\nMaximum Metrics: Maximum metrics at their respective thresholds\n                        metric threshold        value idx\n1                       max f1  0.352431     0.706458 202\n2                       max f2  0.137066     0.779900 277\n3                 max f0point5  0.677497     0.736291 101\n4                 max accuracy  0.501552     0.933159 157\n5                max precision  0.979297     1.000000   0\n6                   max recall  0.000392     1.000000 399\n7              max specificity  0.979297     1.000000   0\n8             max absolute_mcc  0.444998     0.666214 173\n9   max min_per_class_accuracy  0.120204     0.888807 284\n10 max mean_per_class_accuracy  0.104979     0.889933 292\n11                     max tns  0.979297 10792.000000   0\n12                     max fns  0.979297  1458.000000   0\n13                     max fps  0.000392 10792.000000 399\n14                     max tps  0.000392  1461.000000 399\n15                     max tnr  0.979297     1.000000   0\n16                     max fnr  0.979297     0.997947   0\n17                     max fpr  0.000392     1.000000 399\n18                     max tpr  0.000392     1.000000 399\n\nGains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\nCross-Validation Metrics Summary: \n                mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\naccuracy    0.928585  0.007752   0.922282   0.939715   0.927885   0.920700\nauc         0.952844  0.004395   0.946725   0.957085   0.955305   0.949760\nerr         0.071415  0.007752   0.077718   0.060285   0.072115   0.079301\nerr_count 175.000000 19.000000 188.000000 148.000000 180.000000 195.000000\nf0point5    0.697435  0.034539   0.681052   0.739164   0.688790   0.653393\n          cv_5_valid\naccuracy    0.932343\nauc         0.955344\nerr         0.067657\nerr_count 164.000000\nf0point5    0.724777\n\n---\n                        mean        sd cv_1_valid cv_2_valid cv_3_valid\nprecision           0.687130  0.049907   0.680135   0.751969   0.662198\nr2                  0.524032  0.026224   0.481173   0.535484   0.547705\nrecall              0.752175  0.064045   0.684746   0.692029   0.820598\nresidual_deviance 824.421200 42.222744 887.693100 769.068800 816.439100\nrmse                0.223489  0.007711   0.235702   0.215294   0.219011\nspecificity         0.952420  0.014013   0.955273   0.971088   0.942597\n                  cv_4_valid cv_5_valid\nprecision           0.622995   0.718354\nr2                  0.518086   0.537709\nrecall              0.811847   0.751656\nresidual_deviance 824.678160 824.226900\nrmse                0.222893   0.224544\nspecificity         0.935083   0.958058\n\n$preprocess\nfunction (x) \nx\n&lt;bytecode: 0x000002dcd9ff8428&gt;\n&lt;environment: 0x000002dcd9fe8df0&gt;\n\n$bin_continuous\n[1] TRUE\n\n$n_bins\n[1] 4\n\n$quantile_bins\n[1] TRUE\n\n$use_density\n[1] TRUE\n\n$feature_type\n              sku      national_inv         lead_time    in_transit_qty \n        \"numeric\"         \"numeric\"         \"numeric\"         \"numeric\" \n forecast_3_month  forecast_6_month  forecast_9_month     sales_1_month \n        \"numeric\"         \"numeric\"         \"numeric\"         \"numeric\" \n    sales_3_month     sales_6_month     sales_9_month          min_bank \n        \"numeric\"         \"numeric\"         \"numeric\"         \"numeric\" \n  potential_issue   pieces_past_due  perf_6_month_avg perf_12_month_avg \n         \"factor\"         \"numeric\"         \"numeric\"         \"numeric\" \n     local_bo_qty         deck_risk     oe_constraint         ppap_risk \n        \"numeric\"          \"factor\"          \"factor\"          \"factor\" \n    stop_auto_buy          rev_stop \n         \"factor\"          \"factor\" \n\n$bin_cuts\n$bin_cuts$sku\n     0%     25%     50%     75%    100% \n1112390 1509893 1925344 2827490 3284775 \n\n$bin_cuts$national_inv\n    0%    25%    50%    75%   100% \n -1193      3     11     63 730722 \n\n$bin_cuts$lead_time\n  0%  25%  50% 100% \n   0    4    8   52 \n\n$bin_cuts$in_transit_qty\n[1]      0  42730  85460 128190 170920\n\n$bin_cuts$forecast_3_month\n    0%    75%   100% \n     0      9 479808 \n\n$bin_cuts$forecast_6_month\n    0%    75%   100% \n     0     20 967776 \n\n$bin_cuts$forecast_9_month\n     0%     75%    100% \n      0      30 1418208 \n\n$bin_cuts$sales_1_month\n    0%    75%   100% \n     0      5 186451 \n\n$bin_cuts$sales_3_month\n    0%    50%    75%   100% \n     0      1     16 550609 \n\n$bin_cuts$sales_6_month\n     0%     50%     75%    100% \n      0       3      32 1136154 \n\n$bin_cuts$sales_9_month\n     0%     50%     75%    100% \n      0       5      47 1759152 \n\n$bin_cuts$min_bank\n   0%   75%  100% \n    0     3 85584 \n\n$bin_cuts$potential_issue\nNULL\n\n$bin_cuts$pieces_past_due\n[1]     0  3456  6912 10368 13824\n\n$bin_cuts$perf_6_month_avg\n    0%    25%    50%    75%   100% \n-99.00   0.63   0.82   0.96   1.00 \n\n$bin_cuts$perf_12_month_avg\n    0%    25%    50%    75%   100% \n-99.00   0.66   0.80   0.95   1.00 \n\n$bin_cuts$local_bo_qty\n[1]    0.00  316.75  633.50  950.25 1267.00\n\n$bin_cuts$deck_risk\nNULL\n\n$bin_cuts$oe_constraint\nNULL\n\n$bin_cuts$ppap_risk\nNULL\n\n$bin_cuts$stop_auto_buy\nNULL\n\n$bin_cuts$rev_stop\nNULL\n\n\n$feature_distribution\n$feature_distribution$sku\n\n        1         2         3         4 \n0.2500328 0.2499672 0.2499672 0.2500328 \n\n$feature_distribution$national_inv\n\n        1         2         3         4 \n0.2740454 0.2260202 0.2516074 0.2483270 \n\n$feature_distribution$lead_time\n\n        1         2         3 \n0.2979924 0.4132004 0.2321874 \n\n$feature_distribution$in_transit_qty\n\n           1            2            4 \n9.998688e-01 6.560819e-05 6.560819e-05 \n\n$feature_distribution$forecast_3_month\n\n        1         2 \n0.7539037 0.2460963 \n\n$feature_distribution$forecast_6_month\n\n        1         2 \n0.7552815 0.2447185 \n\n$feature_distribution$forecast_9_month\n\n        1         2 \n0.7552159 0.2447841 \n\n$feature_distribution$sales_1_month\n\n        1         2 \n0.7609894 0.2390106 \n\n$feature_distribution$sales_3_month\n\n        1         2         3 \n0.5015090 0.2506889 0.2478021 \n\n$feature_distribution$sales_6_month\n\n        1         2         3 \n0.5100381 0.2418318 0.2481302 \n\n$feature_distribution$sales_9_month\n\n        1         2         3 \n0.5148931 0.2360583 0.2490487 \n\n$feature_distribution$min_bank\n\n        1         2 \n0.7558719 0.2441281 \n\n$feature_distribution$potential_issue\n\n         No         Yes \n0.998622228 0.001377772 \n\n$feature_distribution$pieces_past_due\n\n           1            2            4 \n9.998688e-01 6.560819e-05 6.560819e-05 \n\n$feature_distribution$perf_6_month_avg\n\n        1         2         3         4 \n0.2608582 0.2558719 0.2348117 0.2484582 \n\n$feature_distribution$perf_12_month_avg\n\n        1         2         3         4 \n0.2815247 0.2246424 0.2610550 0.2327779 \n\n$feature_distribution$local_bo_qty\n\n           1            2            4 \n0.9994751345 0.0003280409 0.0001968246 \n\n$feature_distribution$deck_risk\n\n       No       Yes \n0.7790972 0.2209028 \n\n$feature_distribution$oe_constraint\n\n          No          Yes \n0.9997375672 0.0002624328 \n\n$feature_distribution$ppap_risk\n\n       No       Yes \n0.8797402 0.1202598 \n\n$feature_distribution$stop_auto_buy\n\n        No        Yes \n0.03424747 0.96575253 \n\n$feature_distribution$rev_stop\n\n          No          Yes \n0.9995407427 0.0004592573 \n\n\nattr(,\"class\")\n[1] \"data_frame_explainer\" \"explainer\"            \"list\"                \n\n\n\nexplanation &lt;- test_tbl %&gt;%\n    slice(1) %&gt;%\n    select(-went_on_backorder) %&gt;%\n    lime::explain(\n    \n        # Pass our explainer object\n        explainer = explainer,\n        # Because it is a binary classification model: 1\n        n_labels   = 1,\n        # number of features to be returned\n        n_features = 8,\n        # number of localized linear models\n        n_permutations = 5000,\n        # Let's start with 1\n        kernel_width   = 1\n    )\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nexplanation\n\n# A tibble: 8 × 13\n  model_type    case  label label_prob model_r2 model_intercept model_prediction\n  &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;      &lt;dbl&gt;    &lt;dbl&gt;           &lt;dbl&gt;            &lt;dbl&gt;\n1 classificati… 1     Yes        0.901    0.396          0.0796            0.671\n2 classificati… 1     Yes        0.901    0.396          0.0796            0.671\n3 classificati… 1     Yes        0.901    0.396          0.0796            0.671\n4 classificati… 1     Yes        0.901    0.396          0.0796            0.671\n5 classificati… 1     Yes        0.901    0.396          0.0796            0.671\n6 classificati… 1     Yes        0.901    0.396          0.0796            0.671\n7 classificati… 1     Yes        0.901    0.396          0.0796            0.671\n8 classificati… 1     Yes        0.901    0.396          0.0796            0.671\n# ℹ 6 more variables: feature &lt;chr&gt;, feature_value &lt;dbl&gt;, feature_weight &lt;dbl&gt;,\n#   feature_desc &lt;chr&gt;, data &lt;list&gt;, prediction &lt;list&gt;\n\n\n\nexplanation %&gt;%\n    as.tibble() %&gt;%\n    select(feature:prediction) \n\n# A tibble: 8 × 6\n  feature    feature_value feature_weight feature_desc data         prediction  \n  &lt;chr&gt;              &lt;dbl&gt;          &lt;dbl&gt; &lt;chr&gt;        &lt;list&gt;       &lt;list&gt;      \n1 in_transi…             0         0.221  in_transit_… &lt;named list&gt; &lt;named list&gt;\n2 national_…             0         0.227  national_in… &lt;named list&gt; &lt;named list&gt;\n3 sku              1114823         0.118  sku &lt;= 1509… &lt;named list&gt; &lt;named list&gt;\n4 potential…             1        -0.0895 potential_i… &lt;named list&gt; &lt;named list&gt;\n5 min_bank               2        -0.0883 min_bank &lt;=… &lt;named list&gt; &lt;named list&gt;\n6 local_bo_…             0         0.0901 local_bo_qt… &lt;named list&gt; &lt;named list&gt;\n7 forecast_…            31         0.0575 20 &lt; foreca… &lt;named list&gt; &lt;named list&gt;\n8 sales_1_m…             7         0.0547 5 &lt; sales_1… &lt;named list&gt; &lt;named list&gt;"
  },
  {
    "objectID": "content/BBModels/bbmodels.html#plot_features",
    "href": "content/BBModels/bbmodels.html#plot_features",
    "title": "Supervised ML - Regression",
    "section": "plot_features",
    "text": "plot_features\n\nplot_features &lt;- function(explanation) {\n  ggplot(explanation) +\n  geom_col(aes(feature_desc %&gt;% \n                 str_replace_all(pattern = \"_\", replacement = \" \") %&gt;% \n                 str_to_title(),\n               feature_weight,\n               fill = factor(sign(feature_weight)))) +\n  coord_flip() +\n  scale_fill_discrete(name = \"Influence\", labels = c(\"Contradicts\", \"Supports\")) +\n  theme(legend.position=\"bottom\") +\n  labs(\n    title = \"Weighting of features\",\n    subtitle = paste(\"Probability:\",\n                     as.character(round(unique(explanation$label_prob),4)),\n                     \"\\nExplanation Fit:\",\n                     as.character(round(unique(explanation$model_r2),4)) ),\n    x = \"Weight\",\n    y = \"Feature\",\n  )\n}\n\n\nplot_features(explanation)"
  },
  {
    "objectID": "content/BBModels/bbmodels.html#plot_explanations",
    "href": "content/BBModels/bbmodels.html#plot_explanations",
    "title": "Supervised ML - Regression",
    "section": "plot_explanations",
    "text": "plot_explanations\n\nexplanation &lt;- test_tbl %&gt;%\n    slice(1:20) %&gt;%\n    select(-went_on_backorder) %&gt;%\n    lime::explain(\n        explainer = explainer,\n        n_labels   = 1,\n        n_features = 8,\n        n_permutations = 5000,\n        kernel_width   = 0.5\n    )\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n\nplot_explanations &lt;- function(explanation, slicesize = 20) {\n  ggplot(explanation) +\n  geom_tile(aes(factor(case, levels = 1:slicesize),\n                feature_desc %&gt;% \n                 str_replace_all(pattern = \"_\", replacement = \" \") %&gt;% \n                 str_to_title(),\n                fill = feature_weight)) +\n  facet_wrap(~ label) +\n  scale_fill_continuous(name = \"Feature\\nWeight\") +\n  labs(\n    x = \"Case\",\n    y = \"Feature\"\n  )\n}\nplot_explanations(explanation, 20)\n\n\n\n\n\n\n\n\nCongratulations! You are done with the 6th challenge!"
  },
  {
    "objectID": "content/DL/deepL.html",
    "href": "content/DL/deepL.html",
    "title": "Deep Learning",
    "section": "",
    "text": "A telecommunications company [Telco] is concerned about the number of customers leaving their landline business for cable competitors. They need to understand who is leaving. Imagine that you’re an analyst at this company and you have to find out who is leaving and why.\nCustomer churn refers to the situation when a customer ends their relationship with a company, and it’s a costly problem. Customer churn is a problem that all companies need to monitor, especially those that depend on subscription-based revenue streams. Loss of customers impacts sales. We are using the keras package to produce an Artificial Neural Network (ANN) model on the IBM Watson Telco Customer Churn Data Set! As for most business problems, it’s equally important to explain what features drive the model, which is why we’ll use the lime package for explainability. Moreover, we are going to cross-check the LIME results with a Correlation Analysis."
  },
  {
    "objectID": "content/DL/deepL.html#split-data",
    "href": "content/DL/deepL.html#split-data",
    "title": "Deep Learning",
    "section": "Split data",
    "text": "Split data\n\n# Split test/training sets\nset.seed(100)\ntrain_test_split &lt;- rsample::initial_split(churn_data_tbl, prop = 0.85)\ntrain_test_split\n\n&lt;Training/Testing/Total&gt;\n&lt;5977/1055/7032&gt;\n\n## &lt;Analysis/Assess/Total&gt;\n## &lt;5626/1406/7032&gt;\n\n# Retrieve train and test sets\ntrain_tbl &lt;- training(train_test_split)\ntest_tbl  &lt;- testing(train_test_split)"
  },
  {
    "objectID": "content/DL/deepL.html#histogram",
    "href": "content/DL/deepL.html#histogram",
    "title": "Deep Learning",
    "section": "Histogram",
    "text": "Histogram\n\n#hist(churn_data_tbl)\nchurn_data_tbl %&gt;% ggplot(aes(x = tenure)) +\n                      geom_histogram(binwidth = 0.5, fill =  \"#2DC6D6\") +\n                      labs(\n                        title = \"Tenure Counts Without Binning\",\n                        x     = \"tenure (month)\"\n                        )\n\n\n\n\n\n\n\n\n\nchurn_data_tbl %&gt;% ggplot(aes(x = tenure)) + \n  geom_histogram(bins = 6, color = \"white\", fill =  \"#2DC6D6\") +\n  labs(\n    title = \"Tenure Counts With Six Bins\",\n    x     = \"tenure (month)\"\n  )\n\n\n\n\n\n\n\n\n\n# Determine if log transformation improves correlation \n# between TotalCharges and Churn\n\ntrain_tbl %&gt;%\n    select(Churn, TotalCharges) %&gt;%\n    mutate(\n        Churn = Churn %&gt;% as.factor() %&gt;% as.numeric(),\n        LogTotalCharges = log(TotalCharges)\n        ) %&gt;%\n    corrr::correlate() %&gt;%\n    corrr::focus(Churn) %&gt;%\n    corrr::fashion()\n\nCorrelation computed with\n• Method: 'pearson'\n• Missing treated using: 'pairwise.complete.obs'\n\n\n             term Churn\n1    TotalCharges  -.20\n2 LogTotalCharges  -.25"
  },
  {
    "objectID": "content/DL/deepL.html#keras",
    "href": "content/DL/deepL.html#keras",
    "title": "Deep Learning",
    "section": "Keras",
    "text": "Keras"
  },
  {
    "objectID": "content/DL/deepL.html#after-so-many-trys",
    "href": "content/DL/deepL.html#after-so-many-trys",
    "title": "Deep Learning",
    "section": "After so many trys…:",
    "text": "After so many trys…:\n\nhttps://community.rstudio.com/t/error-installation-of-tensorflow-not-found-in-rstudio/67200\nhttps://github.com/rstudio/tensorflow\nhttps://community.rstudio.com/t/problem-in-configuration-rstudio-with-python/44235/4\nhttps://community.rstudio.com/t/keras-error-python-module-tensorflow-keras-was-not-found/93023/2\nhttps://stackoverflow.com/questions/44611325/r-keras-package-error-python-module-tensorflow-contrib-keras-python-keras-was-n\n\n\n# Building our Artificial Neural Network\nmodel_keras &lt;- keras_model_sequential()\n\nmodel_keras %&gt;% \n    # First hidden layer\n    layer_dense(\n        units              = 16, \n        kernel_initializer = \"uniform\", \n        activation         = \"relu\", \n        input_shape        = ncol(x_train_tbl)) %&gt;% \n    # Dropout to prevent overfitting\n    layer_dropout(rate = 0.1) %&gt;%\n    # Second hidden layer\n    layer_dense(\n        units              = 16, \n        kernel_initializer = \"uniform\", \n        activation         = \"relu\") %&gt;% \n    # Dropout to prevent overfitting\n    layer_dropout(rate = 0.1) %&gt;%\n    # Output layer\n    layer_dense(\n        units              = 1, \n        kernel_initializer = \"uniform\", \n        activation         = \"sigmoid\") %&gt;% \n    # Compile ANN\n    compile(\n        optimizer = 'adam',\n        loss      = 'binary_crossentropy',\n        metrics   = c('accuracy')\n    )\nmodel_keras\n\nModel: \"sequential\"\n________________________________________________________________________________\n Layer (type)                       Output Shape                    Param #     \n================================================================================\n dense_2 (Dense)                    (None, 16)                      816         \n dropout_1 (Dropout)                (None, 16)                      0           \n dense_1 (Dense)                    (None, 16)                      272         \n dropout (Dropout)                  (None, 16)                      0           \n dense (Dense)                      (None, 1)                       17          \n================================================================================\nTotal params: 1,105\nTrainable params: 1,105\nNon-trainable params: 0\n________________________________________________________________________________\n\n\n\n# fit_keras &lt;- fit(\n#     object = model_keras,\n#     x = as.matrix(x_train_tbl),\n#     #y = ,\n#     batch_size = 50,\n#     epochs = 35,\n#     validation_split = 0.3\n#     )\n\n\n # fit_keras\n\n\n# plot(fit_keras) +\n#   labs(title = \"Deep Learning Training Results\") +\n#   theme(legend.position  = \"bottom\",\n#         strip.placement  = \"inside\",\n#         strip.background = element_rect(fill = \"#grey\"))\n\n\n# # Predicted Class\n# yhat_keras_class_vec &lt;- predict_classes(object = model_keras, x = as.matrix(x_test_tbl)) %&gt;%\n#     as.vector()\n# \n# # Predicted Class Probability\n# yhat_keras_prob_vec  &lt;- predict_proba(object = model_keras, x = as.matrix(x_test_tbl)) %&gt;%\n#     as.vector()\n\n\n# estimates_keras_tbl &lt;- tibble(\n#     truth      = as.factor(y_test_vec) %&gt;% fct_recode(yes = \"1\", no = \"0\"),\n#     estimate   = as.factor(yhat_keras_class_vec) %&gt;% fct_recode(yes = \"1\", no = \"0\"),\n#     class_prob = yhat_keras_prob_vec\n# )\n# \n# estimates_keras_tbl\n\n\n# Confusion Table\n#... %&gt;% ...\n\n\n# Accuracy\n#... %&gt;% ...\n\n\n# AUC\n#... %&gt;% ...\n\n\n# Precision\n# tibble(\n#     precision = ...,\n#     recall    = ...\n# )\n\n\n# F1-Statistic\n#estimates_keras_tbl %&gt;% f_meas(truth, estimate, beta = 1)\n\n\n#class(model_keras)\n\n\n# model_type.keras.engine.sequential.Sequential  &lt;- function(x, ...) {\n#     return(\"classification\")\n# }\n\n\n# Setup lime::predict_model() function for keras\n# predict_model.keras.engine.sequential.Sequential &lt;- function(x, newdata, type, ...) {\n#     pred &lt;- predict_proba(object = x, x = as.matrix(newdata))\n#     return(data.frame(Yes = pred, No = 1 - pred))\n# }\n\n\n# # Test our predict_model() function\n# predict_model(x = model_keras, newdata = x_test_tbl, type = 'raw') %&gt;%\n#     tibble::as_tibble()\n\n\n# # Run lime() on training set\n# explainer &lt;- lime::lime(\n#     ...            = ..., \n#     ...            = ... , \n#     bin_continuous = FALSE)\n\n\n# explanation &lt;- lime::explain(\n#     x_test_tbl[1:10,], \n#     ...    = ..., \n#     ...    = ..., \n#     ...    = ...,\n#     ...    = ...)\n\n\n# # Feature correlations to Churn\n# corrr_analysis &lt;- x_train_tbl %&gt;%\n#     mutate(Churn = y_train_vec) %&gt;%\n#     correlate() %&gt;%\n#     focus(Churn) %&gt;%\n#     rename(feature = rowname) %&gt;%\n#     arrange(abs(Churn)) %&gt;%\n#     mutate(feature = as_factor(feature)) \n# corrr_analysis\n\n\n# # Correlation visualization\n# corrr_analysis %&gt;%\n#   ggplot(aes(x = ..., y = fct_reorder(..., desc(...)))) +\n#   geom_point() +\n#   \n#   # Positive Correlations - Contribute to churn\n#   geom_segment(aes(xend = ..., yend = ...), \n#                color = \"red\", \n#                data = corrr_analysis %&gt;% filter(... &gt; ...)) +\n#   geom_point(color = \"red\", \n#              data = corrr_analysis %&gt;% filter(... &gt; ...)) +\n#   \n#   # Negative Correlations - Prevent churn\n#   geom_segment(aes(xend = 0, yend = feature), \n#                color = \"#2DC6D6\", \n#                data = ... +\n#   geom_point(color = \"#2DC6D6\", \n#              data = ... +\n#   \n#   # Vertical lines\n#   geom_vline(xintercept = 0, color = \"#f1fa8c\", size = 1, linetype = 2) +\n#   geom_vline( ... ) +\n#   geom_vline( ... ) +\n#   \n#   # Aesthetics\n#   labs( ... )\n\nCongratulations! You are done with the 7th challenge!"
  },
  {
    "objectID": "content/MLFund/01_MLFunds.html",
    "href": "content/MLFund/01_MLFunds.html",
    "title": "ML Fundamentals Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "content/MLFund/01_MLFunds.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/MLFund/01_MLFunds.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "ML Fundamentals Company Segmentation",
    "section": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %&gt;% glimpse()\n\n#&gt; Rows: 1,225,765\n#&gt; Columns: 8\n#&gt; $ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#&gt; $ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#&gt; $ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#&gt; $ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#&gt; $ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#&gt; $ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#&gt; $ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#&gt; $ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\n\nsp_500_daily_returns_tbl &lt;- sp_500_prices_tbl %&gt;%\n    select(symbol, date, adjusted) %&gt;% \n    filter(date &gt;= \"2018-01-01\") %&gt;% \n    group_by(symbol) %&gt;% \n    mutate(prev_day = lag(adjusted)) %&gt;% \n    drop_na(prev_day) %&gt;% \n    mutate(pct_return = (adjusted - prev_day)/prev_day) %&gt;% \n    select(symbol, date, pct_return)\n    \n\n# Output: sp_500_daily_returns_tbl\nsp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/MLFund/01_MLFunds.html#step-2---convert-to-user-item-format",
    "href": "content/MLFund/01_MLFunds.html#step-2---convert-to-user-item-format",
    "title": "ML Fundamentals Company Segmentation",
    "section": "5.2 Step 2 - Convert to User-Item Format",
    "text": "5.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl &lt;- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;% \n    arrange((symbol)) %&gt;% \n    pivot_wider(names_from = date, values_from = pct_return, values_fill = 0)\n    \n    \n# Output: stock_date_matrix_tbl\nstock_date_matrix_tbl"
  },
  {
    "objectID": "content/MLFund/01_MLFunds.html#step-3---perform-k-means-clustering",
    "href": "content/MLFund/01_MLFunds.html#step-3---perform-k-means-clustering",
    "title": "ML Fundamentals Company Segmentation",
    "section": "5.3 Step 3 - Perform K-Means Clustering",
    "text": "5.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl &lt;- read_rds(\"stock_date_matrix_tbl.rds\")\nstock_date_matrix_tbl\n\n\n\n  \n\n\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\nkmeans_obj &lt;- stock_date_matrix_tbl %&gt;% \n    select(-symbol) %&gt;% \n    kmeans(centers = 4, nstart = 20)\n\n#kmeans_obj\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\nglance(kmeans_obj)"
  },
  {
    "objectID": "content/MLFund/01_MLFunds.html#step-4---find-the-optimal-value-of-k",
    "href": "content/MLFund/01_MLFunds.html#step-4---find-the-optimal-value-of-k",
    "title": "ML Fundamentals Company Segmentation",
    "section": "5.4 Step 4 - Find the optimal value of K",
    "text": "5.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\nk_means_mapped_tbl &lt;- tibble(centers = 1:30) %&gt;%\n    mutate(k_means =  centers %&gt;% map(kmeans_mapper)) %&gt;% \n    mutate(glance  = k_means %&gt;% map(glance))\n\n\n# Output: k_means_mapped_tbl \nk_means_mapped_tbl %&gt;%\n    unnest(glance) %&gt;%\n    select(centers, tot.withinss)\n\n\n\n  \n\n\n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\nk_means_mapped_tbl %&gt;%\n    unnest(glance) %&gt;%\n    select(centers, tot.withinss) %&gt;% \n\n# Visualization\n    ggplot(aes(centers, tot.withinss)) +\n    geom_point(color = \"#2DC6D6\", size = 4) +\n    geom_line(color = \"#2DC6D6\", size = 1) +\n    # Add labels (which are repelled a little)\n    ggrepel::geom_label_repel(aes(label = centers), color = \"#2DC6D6\") + \n    \n    # Formatting\n    labs(title = \"Skree Plot\",\n    subtitle = \"Measures the distance each of the customer are from the closes K-Means center\",\n    caption = \"Conclusion: Based on the Scree Plot, we select 4 clusters to segment the customer base.\")\n\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/MLFund/01_MLFunds.html#step-5---apply-umap",
    "href": "content/MLFund/01_MLFunds.html#step-5---apply-umap",
    "title": "ML Fundamentals Company Segmentation",
    "section": "5.5 Step 5 - Apply UMAP",
    "text": "5.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\numap_results &lt;- stock_date_matrix_tbl %&gt;% \n    select(-symbol) %&gt;% \n    umap()\n# Store results as: umap_results \numap_results\n\n#&gt; umap embedding of 502 items in 2 dimensions\n#&gt; object components: layout, data, knn, config\n\n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl &lt;- umap_results$layout %&gt;% \n    as_tibble(.name_repair = \"unique\") %&gt;% # argument is required to set names in the next step\n    set_names(c(\"x\", \"y\")) %&gt;%\n    bind_cols(\n        stock_date_matrix_tbl %&gt;% select(symbol)\n    ) %&gt;% \n    arrange(symbol)\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n#&gt; • `` -&gt; `...2`\n\n# Output: umap_results_tbl\numap_results_tbl\n\n\n\n  \n\n\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\numap_results_tbl %&gt;%\n    ggplot(aes(x, y)) +\n    geom_point(alpha = 0.5) + \n    #geom_label_repel(aes(label = symbol), size = 3) +\n    labs(title = \"UMAP Projection\",\n            x = \"V1\",\n            y = \"V2\") +\n    theme_tq()\n\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/MLFund/01_MLFunds.html#step-6---combine-k-means-and-umap",
    "href": "content/MLFund/01_MLFunds.html#step-6---combine-k-means-and-umap",
    "title": "ML Fundamentals Company Segmentation",
    "section": "5.6 Step 6 - Combine K-Means and UMAP",
    "text": "5.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"umap_results_tbl.rds\")\numap_results_tbl\n\n\n\n  \n\n\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\nk_means_obj &lt;- stock_date_matrix_tbl %&gt;% \n    select(-symbol) %&gt;% \n    kmeans(centers = 10, nstart = 20)\n# Store as k_means_obj\n#k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %&gt;% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\numap_kmeans_results_tbl &lt;- k_means_obj %&gt;% \n    augment(stock_date_matrix_tbl) %&gt;%\n    select(symbol, .cluster) %&gt;% \n    left_join(y = umap_results_tbl, by = \"symbol\") %&gt;% \n    left_join(sp_500_index_tbl %&gt;% select(symbol, company, sector), by = \"symbol\")\n\n# Output: umap_kmeans_results_tbl \numap_kmeans_results_tbl\n\n\n\n  \n\n\n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %&gt;% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\numap_kmeans_results_tbl %&gt;% \n    ggplot(aes(V1, V2, color = .cluster)) +\n    \n    # Geometries\n    geom_point(alpha = 0.5) +\n    #geom_label_repel(aes(label = symbol), size = 2, fill = \"#282A36\") +\n    \n    # Formatting\n    #scale_color_manual(values=palette_green() %&gt;% rep(10)) +\n    labs(title = \"Company Segmentation: 2D Projection\",\n    subtitle = \"UMAP 2D Projection with K-Means Cluster Assignment\",\n    caption = \"Note: 10 clusters were selected\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/PM/pmeasures.html",
    "href": "content/PM/pmeasures.html",
    "title": "Supervised ML - Regression",
    "section": "",
    "text": "Apply all the steps you have learned in this session on the dataset from challenge of the last session (Product Backorders):"
  },
  {
    "objectID": "content/PM/pmeasures.html#specify-the-response-and-predictor-variables",
    "href": "content/PM/pmeasures.html#specify-the-response-and-predictor-variables",
    "title": "Supervised ML - Regression",
    "section": "Specify the response and predictor variables",
    "text": "Specify the response and predictor variables\n\n# Try Ctrl+Shift+F10, if a cache error occurs with prep\nrecipe_product &lt;- \n  recipe(went_on_backorder ~ ., data = train_tbl) %&gt;%\n  step_zv(all_predictors()) %&gt;%\n  update_role(sku, new_role = \"ID\") %&gt;%\n  prep()\n\ntrain_bake &lt;- bake(recipe_product, new_data = train_tbl)\ntest_bake &lt;- bake(recipe_product, new_data = test_tbl)"
  },
  {
    "objectID": "content/PM/pmeasures.html#automl",
    "href": "content/PM/pmeasures.html#automl",
    "title": "Supervised ML - Regression",
    "section": "AutoML",
    "text": "AutoML\n\nh2o.init()\n\n Connection successful!\n\nR is connected to the H2O cluster: \n    H2O cluster uptime:         4 minutes 19 seconds \n    H2O cluster timezone:       Europe/Berlin \n    H2O data parsing timezone:  UTC \n    H2O cluster version:        3.40.0.4 \n    H2O cluster version age:    1 month and 16 days \n    H2O cluster name:           H2O_started_from_R_docla_gzs042 \n    H2O cluster total nodes:    1 \n    H2O cluster total memory:   3.60 GB \n    H2O cluster total cores:    8 \n    H2O cluster allowed cores:  8 \n    H2O cluster healthy:        TRUE \n    H2O Connection ip:          localhost \n    H2O Connection port:        54321 \n    H2O Connection proxy:       NA \n    H2O Internal Security:      FALSE \n    R Version:                  R version 4.3.0 (2023-04-21 ucrt) \n\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_bake), ratios = c(0.8), seed = 2597)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o &lt;- as.h2o(test_bake)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Set the target and predictors\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\n\n\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 10 \n)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |===                                                                   |   4%\n14:54:14.755: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n14:54:14.783: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |=============                                                         |  19%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |=======================================================               |  79%\n  |                                                                            \n  |============================================================          |  86%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |======================================================================| 100%"
  },
  {
    "objectID": "content/PM/pmeasures.html#save-best-model",
    "href": "content/PM/pmeasures.html#save-best-model",
    "title": "Supervised ML - Regression",
    "section": "Save best Model",
    "text": "Save best Model\n\nh2o_leaderboard &lt;- automl_models_h2o@leaderboard\nh2o_leaderboard\n\n                                                 model_id       auc   logloss\n1 StackedEnsemble_BestOfFamily_2_AutoML_1_20230613_145414 0.9507159 0.1716474\n2 StackedEnsemble_BestOfFamily_1_AutoML_1_20230613_145414 0.9495340 0.1733543\n3                          GBM_1_AutoML_1_20230613_145414 0.9490709 0.1892431\n4                          GBM_3_AutoML_1_20230613_145414 0.8214814 0.3269969\n5                          DRF_1_AutoML_1_20230613_145414 0.8160505 0.6769504\n6                          GLM_1_AutoML_1_20230613_145414 0.7650390 0.3170280\n      aucpr mean_per_class_error      rmse        mse\n1 0.7302760            0.1366178 0.2267358 0.05140913\n2 0.7236724            0.1436277 0.2280016 0.05198475\n3 0.7300887            0.1423506 0.2342703 0.05488256\n4 0.4242645            0.3160760 0.3076090 0.09462329\n5 0.4820170            0.2478435 0.2827942 0.07997257\n6 0.2920050            0.3227629 0.3049366 0.09298635\n\n[8 rows x 7 columns]"
  },
  {
    "objectID": "content/PM/pmeasures.html#predict-using-leader",
    "href": "content/PM/pmeasures.html#predict-using-leader",
    "title": "Supervised ML - Regression",
    "section": "Predict using Leader",
    "text": "Predict using Leader\n\nprediction_tbl &lt;- \n  h2o_leaderboard %&gt;% \n  extract_h2o_model_name_by_position(1) %&gt;% \n  h2o.getModel() %&gt;% \n  h2o.predict(newdata = test_h2o) %&gt;%\n  as.tibble()\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\n\nStackedEnsemble_BestOfFamily_2_AutoML_1_20230613_145414\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntest_bake &lt;- test_bake %&gt;%\n  mutate(\"ID\" = row_number())\n\nprediction_tbl &lt;- prediction_tbl %&gt;%\n  mutate(\"ID\" = row_number()) %&gt;%\n  left_join(test_bake) %&gt;%\n  select(-ID)\n\nJoining with `by = join_by(ID)`"
  },
  {
    "objectID": "content/PM/pmeasures.html#leaderboard-visualization",
    "href": "content/PM/pmeasures.html#leaderboard-visualization",
    "title": "Supervised ML - Regression",
    "section": "Leaderboard visualization",
    "text": "Leaderboard visualization\n\n#fails when rendering website, I dont know why\n#plot_h2o_leaderboard(h2o_leaderboard)"
  },
  {
    "objectID": "content/PM/pmeasures.html#tune-a-model-with-grid-search",
    "href": "content/PM/pmeasures.html#tune-a-model-with-grid-search",
    "title": "Supervised ML - Regression",
    "section": "Tune a model with grid search",
    "text": "Tune a model with grid search\n\n#deeplearning_h2o &lt;- h2o.loadModel(\"../Models/DeepLearning_1_AutoML_4_20220611_123045\")\n\n#h2o.performance(deeplearning_h2o, newdata = test_h2o)\n\n\ndeeplearning_grid_01 &lt;- h2o.grid(\n\n    # See help page for available algos\n    algorithm = \"deeplearning\",\n    \n    # I just use the same as the object\n    grid_id = \"deeplearning_grid_01\",\n    \n    # The following is for ?h2o.deeplearning()\n    # predictor and response variables\n    x = x,\n    y = y,\n    \n    # training and validation frame and crossfold validation\n    training_frame   = train_h2o,\n    validation_frame = valid_h2o,\n    nfolds = 5,\n    \n    # Hyperparamters: Use deeplearning_h2o@allparameters to see all\n    hyper_params = list(\n        # Use some combinations (the first one was the original)\n        hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n        epochs = c(10, 50, 100)\n    )\n)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ndeeplearning_grid_01\n\nH2O Grid Details\n================\n\nGrid ID: deeplearning_grid_01 \nUsed hyper parameters: \n  -  epochs \n  -  hidden \nNumber of models: 18 \nNumber of failed models: 0 \n\nHyper-Parameter Search Summary: ordered by increasing logloss\n      epochs       hidden                     model_ids logloss\n1  103.99630 [10, 10, 10]  deeplearning_grid_01_model_3 0.26093\n2   51.99952 [20, 20, 20]  deeplearning_grid_01_model_8 0.27265\n3  104.01457 [50, 20, 10]  deeplearning_grid_01_model_6 0.27837\n4   52.00589 [10, 10, 10] deeplearning_grid_01_model_11 0.28012\n5   51.98690 [10, 10, 10]  deeplearning_grid_01_model_2 0.28179\n6   52.01273 [50, 20, 10]  deeplearning_grid_01_model_5 0.28422\n7  104.00286 [50, 20, 10] deeplearning_grid_01_model_15 0.28521\n8  104.01588 [20, 20, 20]  deeplearning_grid_01_model_9 0.28619\n9   51.99247 [20, 20, 20] deeplearning_grid_01_model_17 0.28775\n10 104.02056 [20, 20, 20] deeplearning_grid_01_model_18 0.29248\n11 104.00341 [10, 10, 10] deeplearning_grid_01_model_12 0.29276\n12  51.98806 [50, 20, 10] deeplearning_grid_01_model_14 0.30265\n13  10.38295 [20, 20, 20]  deeplearning_grid_01_model_7 0.30981\n14  10.38954 [10, 10, 10]  deeplearning_grid_01_model_1 0.31754\n15  10.39080 [10, 10, 10] deeplearning_grid_01_model_10 0.32127\n16  10.39515 [50, 20, 10]  deeplearning_grid_01_model_4 0.32278\n17  10.39997 [50, 20, 10] deeplearning_grid_01_model_13 0.32396\n18  10.40384 [20, 20, 20] deeplearning_grid_01_model_16 0.32500\n\n\n\nh2o.getGrid(grid_id = \"deeplearning_grid_01\", sort_by = \"auc\", decreasing = TRUE)\n\nH2O Grid Details\n================\n\nGrid ID: deeplearning_grid_01 \nUsed hyper parameters: \n  -  epochs \n  -  hidden \nNumber of models: 18 \nNumber of failed models: 0 \n\nHyper-Parameter Search Summary: ordered by decreasing auc\n      epochs       hidden                     model_ids     auc\n1  103.99630 [10, 10, 10]  deeplearning_grid_01_model_3 0.88079\n2  104.01588 [20, 20, 20]  deeplearning_grid_01_model_9 0.86915\n3  104.01457 [50, 20, 10]  deeplearning_grid_01_model_6 0.86529\n4  104.02056 [20, 20, 20] deeplearning_grid_01_model_18 0.86355\n5   51.99952 [20, 20, 20]  deeplearning_grid_01_model_8 0.85595\n6  104.00286 [50, 20, 10] deeplearning_grid_01_model_15 0.85194\n7   51.98690 [10, 10, 10]  deeplearning_grid_01_model_2 0.84981\n8   52.01273 [50, 20, 10]  deeplearning_grid_01_model_5 0.84975\n9  104.00341 [10, 10, 10] deeplearning_grid_01_model_12 0.84794\n10  52.00589 [10, 10, 10] deeplearning_grid_01_model_11 0.83653\n11  51.99247 [20, 20, 20] deeplearning_grid_01_model_17 0.83505\n12  51.98806 [50, 20, 10] deeplearning_grid_01_model_14 0.81182\n13  10.38295 [20, 20, 20]  deeplearning_grid_01_model_7 0.78278\n14  10.38954 [10, 10, 10]  deeplearning_grid_01_model_1 0.76549\n15  10.39515 [50, 20, 10]  deeplearning_grid_01_model_4 0.76327\n16  10.39080 [10, 10, 10] deeplearning_grid_01_model_10 0.76260\n17  10.40384 [20, 20, 20] deeplearning_grid_01_model_16 0.76159\n18  10.39997 [50, 20, 10] deeplearning_grid_01_model_13 0.74774"
  },
  {
    "objectID": "content/PM/pmeasures.html#visualize-the-trade-of-between-the-precision-and-the-recall-and-the-optimal-threshold",
    "href": "content/PM/pmeasures.html#visualize-the-trade-of-between-the-precision-and-the-recall-and-the-optimal-threshold",
    "title": "Supervised ML - Regression",
    "section": "Visualize the trade of between the precision and the recall and the optimal threshold",
    "text": "Visualize the trade of between the precision and the recall and the optimal threshold\n\ndeeplearning_grid_01_model_6 &lt;- h2o.getModel(\"deeplearning_grid_01_model_6\")\ndeeplearning_grid_01_model_6 %&gt;% h2o.auc(train = T, valid = T, xval = T)\n\n    train     valid      xval \n0.9050487 0.9006460 0.8652939 \n\ndeeplearning_grid_01_model_6 %&gt;%\n    h2o.performance(newdata = test_h2o)\n\nH2OBinomialMetrics: deeplearning\n\nMSE:  0.07089941\nRMSE:  0.2662694\nLogLoss:  0.2349595\nMean Per-Class Error:  0.2229029\nAUC:  0.9116056\nAUCPR:  0.5926501\nGini:  0.8232113\n\nConfusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n         No Yes    Error       Rate\nNo     3197 171 0.050772  =171/3368\nYes     175 268 0.395034   =175/443\nTotals 3372 439 0.090790  =346/3811\n\nMaximum Metrics: Maximum metrics at their respective thresholds\n                        metric threshold       value idx\n1                       max f1  0.202426    0.607710 198\n2                       max f2  0.075741    0.697984 283\n3                 max f0point5  0.287192    0.612536 162\n4                 max accuracy  0.287192    0.910522 162\n5                max precision  0.736350    0.860465  32\n6                   max recall  0.000438    1.000000 397\n7              max specificity  0.999815    0.999703   0\n8             max absolute_mcc  0.202426    0.556383 198\n9   max min_per_class_accuracy  0.070517    0.839729 288\n10 max mean_per_class_accuracy  0.071393    0.842133 287\n11                     max tns  0.999815 3367.000000   0\n12                     max fns  0.999815  443.000000   0\n13                     max fps  0.000073 3368.000000 399\n14                     max tps  0.000438  443.000000 397\n15                     max tnr  0.999815    0.999703   0\n16                     max fnr  0.999815    1.000000   0\n17                     max fpr  0.000073    1.000000 399\n18                     max tpr  0.000438    1.000000 397\n\nGains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n\ndeeplearning_grid_01_model_6 %&gt;%\n  h2o.saveModel(path = \"../Models\", force = TRUE)\n\n[1] \"S:\\\\University\\\\Business Data Machine Learning\\\\ss23-bdml-Engeloid\\\\content\\\\Models\\\\deeplearning_grid_01_model_6\""
  },
  {
    "objectID": "content/PM/pmeasures.html#h2o-performance",
    "href": "content/PM/pmeasures.html#h2o-performance",
    "title": "Supervised ML - Regression",
    "section": "H2o Performance",
    "text": "H2o Performance\n\nstacked_ensemble_h2o &lt;-\n  h2o.loadModel(\"../Models/StackedEnsemble_BestOfFamily_1_AutoML_1_20230613_132849\")\n\n\ntheme_new &lt;- theme(\n      legend.position  = \"bottom\",\n      legend.key       = element_blank(),,\n      panel.background = element_rect(fill   = \"transparent\"),\n      panel.border     = element_rect(color = \"black\", fill = NA, size = 0.7),\n      panel.grid.major = element_line(color = \"grey\", size = 0.4)\n      ) \n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead."
  },
  {
    "objectID": "content/PM/pmeasures.html#precision-recall-and-the-optimal-threshold",
    "href": "content/PM/pmeasures.html#precision-recall-and-the-optimal-threshold",
    "title": "Supervised ML - Regression",
    "section": "Precision, recall and the optimal Threshold",
    "text": "Precision, recall and the optimal Threshold\n\nperformance_h2o &lt;-\n  h2o.performance(stacked_ensemble_h2o, newdata = test_h2o)\n\nperformance_tbl &lt;-\n  performance_h2o %&gt;%\n  h2o.metric() %&gt;%\n  as.tibble()\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\nperformance_tbl %&gt;%\n    ggplot(aes(x = threshold)) +\n    geom_line(aes(y = precision), color = \"green\", size = 1) +\n    geom_line(aes(y = recall), color = \"red\", size = 1) +\n    \n    # Insert line where precision and recall are harmonically optimized\n    geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n    labs(title = \"Precision vs Recall\", y = \"value\") +\n    theme_new\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "content/PM/pmeasures.html#roc-plot",
    "href": "content/PM/pmeasures.html#roc-plot",
    "title": "Supervised ML - Regression",
    "section": "ROC Plot",
    "text": "ROC Plot\n\nmodel_metrics_tbl &lt;- fs::dir_info(path = \"../Models/\") %&gt;%\n    select(path) %&gt;%\n    mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %&gt;%\n    unnest(cols = metrics)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n\nmodel_metrics_tbl %&gt;%\n    mutate(\n        # Extract the model names\n        path = str_split(path, pattern = \"/\", simplify = T)[,3] %&gt;% as_factor(),\n        auc  = auc %&gt;% round(3) %&gt;% as.character() %&gt;% as_factor()\n        ) %&gt;%\n    ggplot(aes(fpr, tpr, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n    \n    # just for demonstration purposes\n    geom_abline(color = \"red\", linetype = \"dotted\") +\n    \n    theme_new +\n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"ROC Plot\",\n        subtitle = \"Performance of 3 Top Performing Models\"\n    )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "content/PM/pmeasures.html#precision-vs-recall-plot",
    "href": "content/PM/pmeasures.html#precision-vs-recall-plot",
    "title": "Supervised ML - Regression",
    "section": "Precision vs Recall Plot",
    "text": "Precision vs Recall Plot"
  },
  {
    "objectID": "content/PM/pmeasures.html#gain-plot",
    "href": "content/PM/pmeasures.html#gain-plot",
    "title": "Supervised ML - Regression",
    "section": "Gain Plot",
    "text": "Gain Plot\n\ngain_lift_tbl &lt;- performance_h2o %&gt;%\n    h2o.gainsLift() %&gt;%\n    as.tibble()\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\n## Gain Chart\n\ngain_transformed_tbl &lt;- gain_lift_tbl %&gt;% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %&gt;%\n    select(-contains(\"lift\")) %&gt;%\n    mutate(baseline = cumulative_data_fraction) %&gt;%\n    rename(gain     = cumulative_capture_rate) %&gt;%\n    # prepare the data for the plotting (for the color and group aesthetics)\n    pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_tbl %&gt;%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Gain Chart of Stacked Ensemble\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Gain\"\n    ) +\n    theme_new\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "content/PM/pmeasures.html#lift-plot",
    "href": "content/PM/pmeasures.html#lift-plot",
    "title": "Supervised ML - Regression",
    "section": "Lift Plot",
    "text": "Lift Plot\n\n## Lift Plot\n\nlift_transformed_tbl &lt;- gain_lift_tbl %&gt;% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %&gt;%\n    select(-contains(\"capture\")) %&gt;%\n    mutate(baseline = 1) %&gt;%\n    rename(lift = cumulative_lift) %&gt;%\n    pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_tbl %&gt;%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1) +\n    labs(\n        title = \"Lift Chart of Stacked Ensemble\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Lift\"\n    ) +\n    theme_new"
  },
  {
    "objectID": "content/PM/pmeasures.html#dashboard-with-cowplot",
    "href": "content/PM/pmeasures.html#dashboard-with-cowplot",
    "title": "Supervised ML - Regression",
    "section": "Dashboard with cowplot",
    "text": "Dashboard with cowplot"
  },
  {
    "objectID": "content/PM/pmeasures.html#shutdown",
    "href": "content/PM/pmeasures.html#shutdown",
    "title": "Supervised ML - Regression",
    "section": "Shutdown",
    "text": "Shutdown\n\nh2o.shutdown(prompt = FALSE)\n\nCongratulations! You are done with the 5th challenge!"
  },
  {
    "objectID": "content/SMLReg2/Regression.html",
    "href": "content/SMLReg2/Regression.html",
    "title": "Supervised ML - Regression",
    "section": "",
    "text": "In this session we did not use the recipes packages to prepare our data. This is going to be your challenge. For further information take a look at the last session or just use google. Prepare the data for the models with the steps provided below. Remember, you don’t need to set the flags by yourself (see all_nominal())."
  },
  {
    "objectID": "content/SMLReg2/Regression.html#data-preparation-feature-engineering",
    "href": "content/SMLReg2/Regression.html#data-preparation-feature-engineering",
    "title": "Supervised ML - Regression",
    "section": "4.1 Data Preparation & Feature Engineering",
    "text": "4.1 Data Preparation & Feature Engineering\n\nbike_features_tbl &lt;- readRDS(\"bike_features_tbl.rds\")\nglimpse(bike_features_tbl)\n\n#&gt; Rows: 231\n#&gt; Columns: 67\n#&gt; $ bike_id                     &lt;dbl&gt; 2875, 2873, 2874, 2876, 2877, 2225, 2091, …\n#&gt; $ model                       &lt;chr&gt; \"Aeroad CF SL Disc 8.0 Di2\", \"Aeroad CF SL…\n#&gt; $ model_year                  &lt;dbl&gt; 2020, 2020, 2020, 2020, 2020, 2019, 2019, …\n#&gt; $ frame_material              &lt;chr&gt; \"carbon\", \"carbon\", \"carbon\", \"carbon\", \"c…\n#&gt; $ weight                      &lt;dbl&gt; 7.60, 7.27, 7.10, 7.73, 7.83, 6.80, 6.80, …\n#&gt; $ price                       &lt;dbl&gt; 4579, 6919, 6429, 5069, 3609, 6139, 5359, …\n#&gt; $ category_1                  &lt;chr&gt; \"Road\", \"Road\", \"Road\", \"Road\", \"Road\", \"R…\n#&gt; $ category_2                  &lt;chr&gt; \"Race\", \"Race\", \"Race\", \"Race\", \"Race\", \"R…\n#&gt; $ category_3                  &lt;chr&gt; \"Aeroad\", \"Aeroad\", \"Aeroad\", \"Aeroad\", \"A…\n#&gt; $ gender                      &lt;chr&gt; \"unisex\", \"unisex\", \"unisex\", \"unisex\", \"u…\n#&gt; $ url                         &lt;chr&gt; \"https://www.canyon.com/en-de/road-bikes/r…\n#&gt; $ Frame                       &lt;chr&gt; \"Canyon Aeroad CF SL Disc\", \"Canyon Aeroad…\n#&gt; $ Fork                        &lt;chr&gt; \"Canyon FK0041 CF SLX Disc\", \"Canyon FK004…\n#&gt; $ `Rear Derailleur`           &lt;chr&gt; \"Shimano Ultegra Di2 R8050 SS\", \"SRAM RED …\n#&gt; $ `Front Derailleur`          &lt;chr&gt; \"Shimano Ultegra Di2 R8050\", \"SRAM RED eTa…\n#&gt; $ Cassette                    &lt;chr&gt; \"Shimano Ultegra R8000, 11-speed, 11-28T\",…\n#&gt; $ Crank                       &lt;chr&gt; \"Shimano Ultegra R8000\", \"SRAM RED D1\", \"S…\n#&gt; $ `Bottom bracket`            &lt;chr&gt; \"Shimano Pressfit BB72\", \"SRAM Pressfit RE…\n#&gt; $ `Thru Axle`                 &lt;chr&gt; \"Canyon Thru Axle\", \"Canyon Thru Axle\", \"C…\n#&gt; $ Cockpit                     &lt;chr&gt; \"Canyon H36 Aerocockpit CF\", \"Canyon H36 A…\n#&gt; $ Saddle                      &lt;chr&gt; \"Selle Italia SLR\", \"Selle Italia SLR\", \"S…\n#&gt; $ Seatpost                    &lt;chr&gt; \"Canyon S27 Aero VCLS CF\", \"Canyon S27 Aer…\n#&gt; $ Pedals                      &lt;chr&gt; \"None included\", \"None included\", \"None in…\n#&gt; $ `Derailleur hanger`         &lt;chr&gt; \"Shop Derailleur Hanger GP0211-01\", \"Shop …\n#&gt; $ Battery                     &lt;chr&gt; \"\", \"SRAM eTap Powerpack\", \"\", \"SRAM eTap …\n#&gt; $ Brake                       &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ `Shift Lever`               &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"Shimano Di2 Remot…\n#&gt; $ Chain                       &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"Shimano CN-HG901 …\n#&gt; $ Stem                        &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Canyon V13\", …\n#&gt; $ Handlebar                   &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Canyon H16 Ae…\n#&gt; $ Headset                     &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ Motor                       &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ `Battery Charger`           &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ `Flat Pedals`               &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ Chainguard                  &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ `Aero Bar`                  &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ `Brake Lever / Master`      &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ `Wheel Tire System`         &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ `Suspension Fork`           &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ `Disc Brake`                &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ Grips                       &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ Chainring                   &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ Display                     &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ Modeswitch                  &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ `Rear Shock`                &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ Light                       &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ Fender                      &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ `Bike Racks`                &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ `Brake 1`                   &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"SRAM S-900 Direct Mou…\n#&gt; $ `Brake 2`                   &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"SRAM S-900 Direct Mou…\n#&gt; $ `Shift-/ Brake Lever 1`     &lt;chr&gt; \"Shimano Ultegra Di2 R8070, 11-speed\", \"SR…\n#&gt; $ `Shift-/ Brake Lever 2`     &lt;chr&gt; \"Shimano Ultegra Di2 R8070, 11-speed\", \"SR…\n#&gt; $ `Wheel 1`                   &lt;chr&gt; \"DT Swiss ARC 1400 Dicut\", \"DT Swiss ARC 1…\n#&gt; $ `Wheel 2`                   &lt;chr&gt; \"DT Swiss ARC 1400 Dicut\", \"DT Swiss ARC 1…\n#&gt; $ `Tyre 1`                    &lt;chr&gt; \"Continental Grand Prix 5000 / Attack  23 …\n#&gt; $ `Tyre 2`                    &lt;chr&gt; \"Continental Grand Prix 5000, 25 mm\", \"Con…\n#&gt; $ `Handlebar Tape 1`          &lt;chr&gt; \"Canyon Ergospeed Gel\", \"Canyon Ergospeed …\n#&gt; $ `Handlebar Tape 2`          &lt;chr&gt; \"Canyon bar-end plug\", \"Canyon bar-end plu…\n#&gt; $ `Manuals and Accessories 1` &lt;chr&gt; \"Canyon tool case\", \"Canyon tool case\", \"C…\n#&gt; $ `Manuals and Accessories 2` &lt;chr&gt; \"DT Swiss warranty & intended use manual\",…\n#&gt; $ `Manuals and Accessories 3` &lt;chr&gt; \"Canyon starter box\", \"Canyon starter box\"…\n#&gt; $ `Manuals and Accessories 4` &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"BAG R…\n#&gt; $ `Manuals and Accessories 5` &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ `Manuals and Accessories 6` &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ `Manuals and Accessories 7` &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ `Manuals and Accessories 8` &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ `Brake Rotor`               &lt;list&gt; \"Shimano RT800\", \"SRAM Centerline X\", \"Sh…\n\nbike_features_tbl &lt;- bike_features_tbl %&gt;% \n    select(model:url, `Rear Derailleur`, `Shift Lever`) %&gt;% \n    mutate(\n      `shimano dura-ace`        = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano dura-ace \") %&gt;% as.numeric(),\n      `shimano ultegra`         = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano ultegra \") %&gt;% as.numeric(),\n      `shimano 105`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano 105 \") %&gt;% as.numeric(),\n      `shimano tiagra`          = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano tiagra \") %&gt;% as.numeric(),\n      `Shimano sora`            = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano sora\") %&gt;% as.numeric(),\n      `shimano deore`           = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano deore(?! xt)\") %&gt;% as.numeric(),\n      `shimano slx`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano slx\") %&gt;% as.numeric(),\n      `shimano grx`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano grx\") %&gt;% as.numeric(),\n      `Shimano xt`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano deore xt |shimano xt \") %&gt;% as.numeric(),\n      `Shimano xtr`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano xtr\") %&gt;% as.numeric(),\n      `Shimano saint`           = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano saint\") %&gt;% as.numeric(),\n      `SRAM red`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram red\") %&gt;% as.numeric(),\n      `SRAM force`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram force\") %&gt;% as.numeric(),\n      `SRAM rival`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram rival\") %&gt;% as.numeric(),\n      `SRAM apex`               = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram apex\") %&gt;% as.numeric(),\n      `SRAM xx1`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram xx1\") %&gt;% as.numeric(),\n      `SRAM x01`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram x01|sram xo1\") %&gt;% as.numeric(),\n      `SRAM gx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram gx\") %&gt;% as.numeric(),\n      `SRAM nx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram nx\") %&gt;% as.numeric(),\n      `SRAM sx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram sx\") %&gt;% as.numeric(),\n      `SRAM sx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram sx\") %&gt;% as.numeric(),\n      `Campagnolo potenza`      = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"campagnolo potenza\") %&gt;% as.numeric(),\n      `Campagnolo super record` = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"campagnolo super record\") %&gt;% as.numeric(),\n      `shimano nexus`           = `Shift Lever`     %&gt;% str_to_lower() %&gt;% str_detect(\"shimano nexus\") %&gt;% as.numeric(),\n      `shimano alfine`          = `Shift Lever`     %&gt;% str_to_lower() %&gt;% str_detect(\"shimano alfine\") %&gt;% as.numeric()\n    ) %&gt;% \n  # Remove original columns  \n  select(-c(`Rear Derailleur`, `Shift Lever`)) %&gt;% \n  # Set all NAs to 0\n  mutate_if(is.numeric, ~replace(., is.na(.), 0))\n\nReordering and tidying\n\n# 2.0 TRAINING & TEST SETS ----\nbike_features_tbl &lt;- bike_features_tbl %&gt;% \n  \n  mutate(id = row_number()) %&gt;% \n  \n  select(id, everything(), -url)"
  },
  {
    "objectID": "content/SMLReg2/Regression.html#splitting-the-data",
    "href": "content/SMLReg2/Regression.html#splitting-the-data",
    "title": "Supervised ML - Regression",
    "section": "4.2 Splitting the Data",
    "text": "4.2 Splitting the Data\n\nbike_features_tbl %&gt;% distinct(category_2)\n\n\n\n  \n\n\n# run both following commands at the same time\nset.seed(seed = 1337)\nsplit_obj &lt;- rsample::initial_split(bike_features_tbl, prop   = 0.80, \n                                                       strata = \"category_2\")\n\n# Check if testing contains all category_2 values\nsplit_obj %&gt;% training() %&gt;% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj %&gt;% testing() %&gt;% distinct(category_2)\n\n\n\n  \n\n\n# Assign training and test data\ntrain_tbl &lt;- training(split_obj)\ntest_tbl  &lt;- testing(split_obj) \n\n# We have to remove spaces and dashes from the column names\ntrain_tbl &lt;- train_tbl %&gt;% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_tbl  &lt;- test_tbl  %&gt;% set_names(str_replace_all(names(test_tbl),  \" |-\", \"_\"))"
  },
  {
    "objectID": "content/SMLReg2/Regression.html#recipe",
    "href": "content/SMLReg2/Regression.html#recipe",
    "title": "Supervised ML - Regression",
    "section": "4.3 Recipe",
    "text": "4.3 Recipe\n\nbike_rec &lt;- \n  recipe(price ~ ., data = train_tbl) %&gt;%\n  step_rm(id, model, model_year, gender, category_1, category_3) %&gt;%\n  step_dummy(all_nominal(), -all_outcomes(), one_hot = T) %&gt;%\n  step_zv()"
  },
  {
    "objectID": "content/SMLReg2/Regression.html#model-1",
    "href": "content/SMLReg2/Regression.html#model-1",
    "title": "Supervised ML - Regression",
    "section": "5.1 Model 1",
    "text": "5.1 Model 1\n\nModel\n\n# 3.0 LINEAR METHODS ----\n# 3.1 LINEAR REGRESSION - NO ENGINEERED FEATURES ----\n\n# 3.1.1 Model ----\nmodel_01_model &lt;- \n  linear_reg(mode = \"regression\") %&gt;%\n  set_engine(\"lm\")\n\nmodel_01_workflow &lt;- \n  workflow() %&gt;%\n  add_model(model_01_model) %&gt;%\n  add_recipe(bike_rec)\n\nmodel_01_linear_lm_simple &lt;- \n  model_01_workflow %&gt;%\n  fit(data = train_tbl)\n\nmodel_01_linear_lm_simple %&gt;%\n    predict(new_data = test_tbl) %&gt;%\n    bind_cols(test_tbl %&gt;% select(price)) %&gt;%\n    yardstick::metrics(truth = price, estimate = .pred_res)\n\n#&gt; Warning in predict.lm(object = object$fit, newdata = new_data, type =\n#&gt; \"response\"): prediction from rank-deficient fit; attr(*, \"non-estim\") has\n#&gt; doubtful cases\n\n\n\n\n  \n\n\n\n\n\nModel Explanation\n\n# tidy() function is applicable for objects with class \"lm\"\nmodel_01_linear_lm_simple %&gt;%\n  pull_workflow_fit() %&gt;%\n  broom::tidy() %&gt;%\n  arrange(p.value) %&gt;%\n  mutate(term = as_factor(term) %&gt;% fct_rev()) %&gt;%\n  \n  ggplot(aes(x = estimate, y = term)) +\n  geom_point(color = \"#2dc6d6\", size = 3) +\n  ggrepel::geom_label_repel(aes(label = scales::dollar(estimate, accuracy = 1, suffix = \" €\", prefix = \"\")),\n                            size = 4, fill = \"#272A36\", color = \"white\") +\n  scale_x_continuous(labels = scales::dollar_format(suffix = \" €\", prefix = \"\")) +\n  labs(title = \"Linear Regression: Feature Importance\",\n       subtitle = \"Model 01: Simple lm Model\") \n\n#&gt; Warning: `pull_workflow_fit()` was deprecated in workflows 0.2.3.\n#&gt; ℹ Please use `extract_fit_parsnip()` instead.\n\n\n#&gt; Warning: Removed 5 rows containing missing values (`geom_point()`).\n\n\n#&gt; Warning: Removed 5 rows containing missing values (`geom_label_repel()`).\n\n\n#&gt; Warning: ggrepel: 2 unlabeled data points (too many overlaps). Consider\n#&gt; increasing max.overlaps\n\n\n\n\n\n\n\n\n\n\n# 3.1.3 Function to Calculate Metrics ----\n\n# Code we used earlier\nmodel_01_linear_lm_simple %&gt;%\n    predict(new_data = test_tbl) %&gt;%\n\n    bind_cols(test_tbl %&gt;% select(price)) %&gt;%\n    yardstick::metrics(truth = price, estimate = .pred_res)\n\n#&gt; Warning in predict.lm(object = object$fit, newdata = new_data, type =\n#&gt; \"response\"): prediction from rank-deficient fit; attr(*, \"non-estim\") has\n#&gt; doubtful cases\n\n\n\n\n  \n\n\n# Generalized into a function\ncalc_metrics &lt;- function(model, new_data = test_tbl) {\n\n    model %&gt;%\n        predict(new_data = new_data) %&gt;%\n\n        bind_cols(new_data %&gt;% select(price)) %&gt;%\n        yardstick::metrics(truth = price, estimate = .pred_res)\n\n}\n\nmodel_01_linear_lm_simple %&gt;% calc_metrics(test_tbl)\n\n#&gt; Warning in predict.lm(object = object$fit, newdata = new_data, type =\n#&gt; \"response\"): prediction from rank-deficient fit; attr(*, \"non-estim\") has\n#&gt; doubtful cases"
  },
  {
    "objectID": "content/SMLReg2/Regression.html#model-2",
    "href": "content/SMLReg2/Regression.html#model-2",
    "title": "Supervised ML - Regression",
    "section": "5.2 Model 2",
    "text": "5.2 Model 2\n\nModel\n\n# 3.2 LINEAR REGRESSION - WITH ENGINEERED FEATURES ----\n\n# 3.2.1 Model ----\nmodel_02_model &lt;- linear_reg(\"regression\") %&gt;%\n    set_engine(\"lm\")\n\nmodel_02_workflow &lt;- \n  workflow() %&gt;%\n  add_model(model_02_model) %&gt;%\n  add_recipe(bike_rec)\n\nmodel_02_linear_lm_complex &lt;- \n  model_02_workflow %&gt;%\n  fit(data = train_tbl)\n\nmodel_02_linear_lm_complex %&gt;% calc_metrics(test_tbl)\n\n#&gt; Warning in predict.lm(object = object$fit, newdata = new_data, type =\n#&gt; \"response\"): prediction from rank-deficient fit; attr(*, \"non-estim\") has\n#&gt; doubtful cases\n\n\n\n\n  \n\n\n\n\n\nModel Explanation\n\n# 3.2.2 Feature importance ----\nmodel_02_linear_lm_complex %&gt;%\n  pull_workflow_fit() %&gt;%\n  broom::tidy() %&gt;%\n  arrange(p.value) %&gt;%\n  mutate(term = as_factor(term) %&gt;% fct_rev()) %&gt;%\n  \n  ggplot(aes(x = estimate, y = term)) +\n  geom_point(color = \"#2dc6d6\", size = 3) +\n  ggrepel::geom_label_repel(aes(label = scales::dollar(estimate, accuracy = 1, suffix = \" €\", prefix = \"\")),\n                            size = 4, fill = \"#272A36\", color = \"white\") +\n  scale_x_continuous(labels = scales::dollar_format(suffix = \" €\", prefix = \"\")) +\n  labs(title = \"Linear Regression: Feature Importance\",\n       subtitle = \"Model 02: Complex lm Model\")\n\n#&gt; Warning: Removed 5 rows containing missing values (`geom_point()`).\n\n\n#&gt; Warning: Removed 5 rows containing missing values (`geom_label_repel()`).\n\n\n#&gt; Warning: ggrepel: 2 unlabeled data points (too many overlaps). Consider\n#&gt; increasing max.overlaps"
  },
  {
    "objectID": "content/SMLReg2/Regression.html#model-3-glmnet-elastic-net",
    "href": "content/SMLReg2/Regression.html#model-3-glmnet-elastic-net",
    "title": "Supervised ML - Regression",
    "section": "6.1 Model 3: GLMNET (Elastic Net)",
    "text": "6.1 Model 3: GLMNET (Elastic Net)\n\nModel\n\n# 3.3 PENALIZED REGRESSION ----\n\n# 3.3.1 Model ----\nmodel_03_model &lt;- linear_reg(mode    = \"regression\", \n             penalty = 10, \n             mixture = 0.2) %&gt;%\n  set_engine(\"glmnet\")\n\nmodel_03_workflow &lt;- \n  workflow() %&gt;%\n  add_model(model_03_model) %&gt;%\n  add_recipe(bike_rec)\n\nmodel_03_linear_glmnet &lt;- \n  model_03_workflow %&gt;%\n  fit(data = train_tbl)\n\nmodel_03_linear_glmnet %&gt;% \n  predict(test_tbl) %&gt;%\n  bind_cols(test_tbl %&gt;% select(price)) %&gt;%\n  yardstick::metrics(truth = price, estimate = .pred)\n\n\n\n  \n\n\n\n\n\nModel Explanation\n\n# 3.3.2 Feature Importance ----\nmodel_03_linear_glmnet %&gt;%\n    pull_workflow_fit() %&gt;%\n    broom::tidy() %&gt;%\n    \n    # No p value here\n    arrange(desc(abs(estimate))) %&gt;%\n    mutate(term = as_factor(term) %&gt;% fct_rev()) %&gt;%\n\n    ggplot(aes(x = estimate, y = term)) +\n    geom_point() +\n    ggrepel::geom_label_repel(aes(label = scales::dollar(estimate, accuracy = 1)),\n                              size = 3) +\n    scale_x_continuous(labels = scales::dollar_format()) +\n    labs(title = \"Linear Regression: Feature Importance\",\n         subtitle = \"Model 03: GLMNET Model\")"
  },
  {
    "objectID": "content/SMLReg2/Regression.html#model-4-decision-trees",
    "href": "content/SMLReg2/Regression.html#model-4-decision-trees",
    "title": "Supervised ML - Regression",
    "section": "7.1 Model 4: Decision Trees",
    "text": "7.1 Model 4: Decision Trees\n\nModel\n\n# 4.0 TREE-BASED METHODS ----\n# 4.1 DECISION TREES ----\n# 4.1.1 Model ----\n\nmodel_04_model &lt;- \n  decision_tree(mode = \"regression\",\n              \n              # Set the values accordingly to get started\n              cost_complexity = 0.001,\n              tree_depth      = 5,\n              min_n           = 7) %&gt;%\n  set_engine(\"rpart\")\n\nmodel_04_workflow &lt;- \n  workflow() %&gt;%\n  add_model(model_04_model) %&gt;%\n  add_recipe(bike_rec)\n\nmodel_04_tree_decision_tree &lt;- \n  model_04_workflow %&gt;%\n  fit(data = train_tbl)\n\nmodel_04_tree_decision_tree %&gt;% \n  predict(test_tbl) %&gt;%\n  bind_cols(test_tbl %&gt;% select(price)) %&gt;%\n  yardstick::metrics(truth = price, estimate = .pred)\n\n\n\n  \n\n\n\n\n\nModel Explanation\n\npull_workflow_fit(model_04_tree_decision_tree)$fit %&gt;%\n    rpart.plot(roundint = FALSE)\n\n\n\n\n\n\n\n# Optimze plot\npull_workflow_fit(model_04_tree_decision_tree)$fit %&gt;%\n    rpart.plot(\n        roundint = FALSE,\n        type = 1,\n        extra = 101, # see help page\n        fallen.leaves = FALSE, # changes the angles from 90 to 45-degree\n        cex = 0.8, # font size\n        main = \"Model 04: Decision Tree\", # Adds title\n        box.palette = \"Blues\"\n        )\n\n\n\n\n\n\n\nshow.prp.palettes()"
  },
  {
    "objectID": "content/SMLReg2/Regression.html#ranger---model-5",
    "href": "content/SMLReg2/Regression.html#ranger---model-5",
    "title": "Supervised ML - Regression",
    "section": "7.2 Ranger - Model 5",
    "text": "7.2 Ranger - Model 5\n\nModel\n\n# 4.2 RANDOM FOREST ----\n\n# 4.2.1 Model: ranger ----\nlibrary(ranger)\n\nmodel_05_model &lt;- rand_forest(\n      mode = \"regression\", mtry = 8, trees = 5000, min_n = 10\n    ) %&gt;%\n    set_engine(\"ranger\", replace = TRUE, splitrule = \"extratrees\", importance = \"impurity\")\n\nmodel_05_workflow &lt;- \n  workflow() %&gt;%\n  add_model(model_05_model) %&gt;%\n  add_recipe(bike_rec)\n\nmodel_05_rand_forest_ranger &lt;- \n  model_05_workflow %&gt;%\n  fit(data = train_tbl)\n\nmodel_05_rand_forest_ranger %&gt;% \n  predict(test_tbl) %&gt;%\n  bind_cols(test_tbl %&gt;% select(price)) %&gt;%\n  yardstick::metrics(truth = price, estimate = .pred)\n\n\n\n  \n\n\n\n\n\nModel Explanation\n\n# 4.2.2 ranger: Feature Importance ----\n\npull_workflow_fit(model_05_rand_forest_ranger)$fit %&gt;%\n    ranger::importance() %&gt;%\n    enframe() %&gt;%\n    arrange(desc(value)) %&gt;%\n    mutate(name = as_factor(name) %&gt;% fct_rev()) %&gt;%\n\n    ggplot(aes(value, name)) +\n    geom_point() +\n    labs(title = \"ranger: Variable Importance\",\n         subtitle = \"Model 05: Ranger Random Forest Model\")"
  },
  {
    "objectID": "content/SMLReg2/Regression.html#randomforest---model-06",
    "href": "content/SMLReg2/Regression.html#randomforest---model-06",
    "title": "Supervised ML - Regression",
    "section": "7.3 randomForest - Model 06",
    "text": "7.3 randomForest - Model 06\n\nModel\n\n# 4.2.3 Model randomForest ----\nmodel_06_model &lt;- \n    rand_forest(\"regression\") %&gt;%\n    set_engine(\"randomForest\")\n\nmodel_06_workflow &lt;- \n  workflow() %&gt;%\n  add_model(model_06_model) %&gt;%\n  add_recipe(bike_rec)\n\nmodel_06_rand_forest_randomForest &lt;- \n  model_06_workflow %&gt;%\n  fit(data = train_tbl)\n\nmodel_06_rand_forest_randomForest %&gt;% \n  predict(test_tbl) %&gt;%\n  bind_cols(test_tbl %&gt;% select(price)) %&gt;%\n  yardstick::metrics(truth = price, estimate = .pred)\n\n\n\n  \n\n\n\n\n\nModel Explanation\n\npull_workflow_fit(model_06_rand_forest_randomForest)$fit %&gt;%\n    randomForest::importance() %&gt;%\n    # Convert matrix to tibble\n    as_tibble(rownames = \"name\") %&gt;%\n    arrange(desc(IncNodePurity)) %&gt;%\n    mutate(name = as_factor(name) %&gt;% fct_rev()) %&gt;%\n\n    ggplot(aes(IncNodePurity, name)) +\n    geom_point() +\n    labs(\n        title = \"randomForest: Variable Importance\",\n        subtitle = \"Model 06: randomForest Model\"\n    )"
  },
  {
    "objectID": "content/SMLReg2/Regression.html#model---xgboost",
    "href": "content/SMLReg2/Regression.html#model---xgboost",
    "title": "Supervised ML - Regression",
    "section": "7.4 Model - XGBoost",
    "text": "7.4 Model - XGBoost\n\n# 4.3 XGBOOST ----\n# 4.3.1 Model ----\n\nmodel_07_model &lt;- \n    boost_tree(\n      mode = \"regression\",\n      mtry = 30,\n      learn_rate = 0.25,\n      tree_depth = 7\n    ) %&gt;%\n    set_engine(\"xgboost\")\n\nmodel_07_workflow &lt;- \n  workflow() %&gt;%\n  add_model(model_07_model) %&gt;%\n  add_recipe(bike_rec)\n\nmodel_07_boost_tree_xgboost &lt;- \n  model_07_workflow %&gt;%\n  fit(data = train_tbl)\n\nmodel_07_boost_tree_xgboost %&gt;% \n  predict(test_tbl) %&gt;%\n  bind_cols(test_tbl %&gt;% select(price)) %&gt;%\n  yardstick::metrics(truth = price, estimate = .pred)\n\n\n\n  \n\n\n\n\nModel Explanation\n\n# 4.3.2 Feature Importance ----\n\npull_workflow_fit(model_07_boost_tree_xgboost)$fit %&gt;%\n    xgboost::xgb.importance(model = .) %&gt;%\n    as_tibble() %&gt;%\n    arrange(desc(Gain)) %&gt;%\n    mutate(Feature = as_factor(Feature) %&gt;% fct_rev()) %&gt;%\n\n    ggplot(aes(Gain, Feature)) +\n    geom_point() +\n    labs(\n        title = \"XGBoost: Variable Importance\",\n        subtitle = \"Model 07: XGBoost Model\"\n    )\n\n#&gt; Warning: `pull_workflow_fit()` was deprecated in workflows 0.2.3.\n#&gt; ℹ Please use `extract_fit_parsnip()` instead."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "Hi, here are my solutions to the challenges."
  }
]