{
  "hash": "f48e2c1b2210526cc2d54704b2a35a6c",
  "result": {
    "markdown": "---\ntitle: \"Deep Learning\"\ndate: \"2023-06-13\"\noutput: \n    html_document:\n        toc: TRUE\n        theme: flatly\n        highlight: tango\n        code_folding: hide\n        df_print: paged\n---\n\n\n\n\n# Challenge Summary\n\nA telecommunications company [Telco] is concerned about the number of customers leaving their landline business for cable competitors. They need to understand who is leaving. Imagine that you’re an analyst at this company and you have to find out who is leaving and why.\n\nCustomer churn refers to the situation when a customer ends their relationship with a company, and it’s a costly problem. Customer churn is a problem that all companies need to monitor, especially those that depend on subscription-based revenue streams. Loss of customers impacts sales. We are using the keras package to produce an Artificial Neural Network (ANN) model on the IBM Watson Telco Customer Churn Data Set! As for most business problems, it’s equally important to explain what features drive the model, which is why we’ll use the lime package for explainability. Moreover, we are going to cross-check the LIME results with a Correlation Analysis.\n\n# Libraries\n\nLoad the following libraries. \n\n\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-1_c356a7696159fbb9bfe97d0f59680edd'}\n\n```{.r .cell-code}\n# install.packages(\"plotly\")\n\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(broom)\nlibrary(umap)\nlibrary(ggrepel) # Addon for ggplot, so that the labels do not overlap\nlibrary(corrr)\nlibrary(lime)\n\n# Modeling\nlibrary(parsnip)\n\n# Preprocessing & Sampling\nlibrary(recipes)\nlibrary(rsample)\n\n# Modeling Error Metrics\nlibrary(yardstick)\n\n# Plotting Decision Trees\nlibrary(rpart.plot)\n\n#Deep Learning\nlibrary(tensorflow)\ninstall_tensorflow(version = \"2.12.0\", method = \"conda\", envname = \"r-reticulate\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nInstallation complete.\n```\n:::\n\n```{.r .cell-code}\nlibrary(keras)\nuse_condaenv(\"r-reticulate\")\n#install_tensorflow()\n#install_keras()\n```\n:::\n\n\n\n# Data\n\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-2_566ab6bae961577d8f8e6dd73346e1f0'}\n\n```{.r .cell-code}\n# Data set\nchurn_data_raw <- as.tibble(read_csv(\"WA_Fn-UseC_-Telco-Customer-Churn.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 7043 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (17): customerID, gender, Partner, Dependents, PhoneService, MultipleLin...\ndbl  (4): SeniorCitizen, tenure, MonthlyCharges, TotalCharges\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nglimpse(churn_data_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 7,043\nColumns: 21\n$ customerID       <chr> \"7590-VHVEG\", \"5575-GNVDE\", \"3668-QPYBK\", \"7795-CFOCW…\n$ gender           <chr> \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Female\",…\n$ SeniorCitizen    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Partner          <chr> \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes…\n$ Dependents       <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\"…\n$ tenure           <dbl> 1, 34, 2, 45, 2, 8, 22, 10, 28, 62, 13, 16, 58, 49, 2…\n$ PhoneService     <chr> \"No\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", …\n$ MultipleLines    <chr> \"No phone service\", \"No\", \"No\", \"No phone service\", \"…\n$ InternetService  <chr> \"DSL\", \"DSL\", \"DSL\", \"DSL\", \"Fiber optic\", \"Fiber opt…\n$ OnlineSecurity   <chr> \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"No\", \"Yes\", \"…\n$ OnlineBackup     <chr> \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"N…\n$ DeviceProtection <chr> \"No\", \"Yes\", \"No\", \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"Y…\n$ TechSupport      <chr> \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Yes…\n$ StreamingTV      <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"Yes\", \"No\", \"Ye…\n$ StreamingMovies  <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"Yes…\n$ Contract         <chr> \"Month-to-month\", \"One year\", \"Month-to-month\", \"One …\n$ PaperlessBilling <chr> \"Yes\", \"No\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", …\n$ PaymentMethod    <chr> \"Electronic check\", \"Mailed check\", \"Mailed check\", \"…\n$ MonthlyCharges   <dbl> 29.85, 56.95, 53.85, 42.30, 70.70, 99.65, 89.10, 29.7…\n$ TotalCharges     <dbl> 29.85, 1889.50, 108.15, 1840.75, 151.65, 820.50, 1949…\n$ Churn            <chr> \"No\", \"No\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"Y…\n```\n:::\n:::\n\n# Preprocessing\nFirst, we “prune” the data, which is nothing more than removing unnecessary columns and rows. The data has a few columns and rows we’d like to remove:\n\n - The “customerID” column is a unique identifier for each observation that isn’t needed for modeling.\n - The data has 11 NA values all in the “TotalCharges” column. Because it’s such a small percentage of the total population (99.8% complete cases), we can drop these observations (the tidyr package provides a function for that. Type tidyr:: to get a list of the function.)\n - have the target in the first column\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-3_9c3f9e4807df42da40e657743edda32c'}\n\n```{.r .cell-code}\nchurn_data_tbl <- churn_data_raw %>%\n                  select(-customerID) %>%\n                  tidyr::drop_na(TotalCharges) %>% \n                  relocate(Churn)\n\nchurn_data_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7,032 × 20\n   Churn gender SeniorCitizen Partner Dependents tenure PhoneService\n   <chr> <chr>          <dbl> <chr>   <chr>       <dbl> <chr>       \n 1 No    Female             0 Yes     No              1 No          \n 2 No    Male               0 No      No             34 Yes         \n 3 Yes   Male               0 No      No              2 Yes         \n 4 No    Male               0 No      No             45 No          \n 5 Yes   Female             0 No      No              2 Yes         \n 6 Yes   Female             0 No      No              8 Yes         \n 7 No    Male               0 No      Yes            22 Yes         \n 8 No    Female             0 No      No             10 No          \n 9 Yes   Female             0 Yes     No             28 Yes         \n10 No    Male               0 No      Yes            62 Yes         \n# ℹ 7,022 more rows\n# ℹ 13 more variables: MultipleLines <chr>, InternetService <chr>,\n#   OnlineSecurity <chr>, OnlineBackup <chr>, DeviceProtection <chr>,\n#   TechSupport <chr>, StreamingTV <chr>, StreamingMovies <chr>,\n#   Contract <chr>, PaperlessBilling <chr>, PaymentMethod <chr>,\n#   MonthlyCharges <dbl>, TotalCharges <dbl>\n```\n:::\n:::\n\n## Split data\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-4_875f59757e5ae0579731b6c4072af9f3'}\n\n```{.r .cell-code}\n# Split test/training sets\nset.seed(100)\ntrain_test_split <- rsample::initial_split(churn_data_tbl, prop = 0.85)\ntrain_test_split\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Training/Testing/Total>\n<5977/1055/7032>\n```\n:::\n\n```{.r .cell-code}\n## <Analysis/Assess/Total>\n## <5626/1406/7032>\n\n# Retrieve train and test sets\ntrain_tbl <- training(train_test_split)\ntest_tbl  <- testing(train_test_split)\n```\n:::\n\n\n## Histogram\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-5_8784f51b5d8d548f592e323682015462'}\n\n```{.r .cell-code}\n#hist(churn_data_tbl)\nchurn_data_tbl %>% ggplot(aes(x = tenure)) +\n                      geom_histogram(binwidth = 0.5, fill =  \"#2DC6D6\") +\n                      labs(\n                        title = \"Tenure Counts Without Binning\",\n                        x     = \"tenure (month)\"\n                        )\n```\n\n::: {.cell-output-display}\n![](deepL_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-6_d63a1cfb83c3e44be7cdcaff297aa5e7'}\n\n```{.r .cell-code}\nchurn_data_tbl %>% ggplot(aes(x = tenure)) + \n  geom_histogram(bins = 6, color = \"white\", fill =  \"#2DC6D6\") +\n  labs(\n    title = \"Tenure Counts With Six Bins\",\n    x     = \"tenure (month)\"\n  )\n```\n\n::: {.cell-output-display}\n![](deepL_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-7_74f24f50cadf00f8492f3321c05300fc'}\n\n```{.r .cell-code}\n# Determine if log transformation improves correlation \n# between TotalCharges and Churn\n\ntrain_tbl %>%\n    select(Churn, TotalCharges) %>%\n    mutate(\n        Churn = Churn %>% as.factor() %>% as.numeric(),\n        LogTotalCharges = log(TotalCharges)\n        ) %>%\n    corrr::correlate() %>%\n    corrr::focus(Churn) %>%\n    corrr::fashion()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCorrelation computed with\n• Method: 'pearson'\n• Missing treated using: 'pairwise.complete.obs'\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n             term Churn\n1    TotalCharges  -.20\n2 LogTotalCharges  -.25\n```\n:::\n:::\n\n\n\n# One-Hot Encoding\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-8_74b5e929364f522cdceab34680f6ed14'}\n\n```{.r .cell-code}\nchurn_data_tbl %>% \n        pivot_longer(cols      = c(Contract, InternetService, MultipleLines, PaymentMethod), \n                     names_to  = \"feature\", \n                     values_to = \"category\") %>% \n        ggplot(aes(category)) +\n          geom_bar(fill = \"#2DC6D6\") +\n          facet_wrap(~ feature, scales = \"free\") +\n          labs(\n            title = \"Features with multiple categories: Need to be one-hot encoded\"\n          ) +\n          theme(axis.text.x = element_text(angle = 25, \n                                           hjust = 1))\n```\n\n::: {.cell-output-display}\n![](deepL_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n# Preprocessing With Recipes\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-9_8718aadb2cc30b207c83510563818cc2'}\n\n```{.r .cell-code}\nrec_obj <- recipe(Churn ~ ., data = train_tbl) %>%\n    step_rm(Churn) %>% \n    step_discretize(tenure, options = list(cuts = 6)) %>%\n    step_log(TotalCharges) %>%\n    step_dummy(all_nominal(), -all_outcomes(), one_hot = T) %>%\n    step_center(all_predictors(), -all_outcomes()) %>%\n    step_scale(all_predictors(), -all_outcomes()) %>%\n    prep(data = train_tbl)\n```\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-10_666df4c36dd9aa5589f42c30dc3e12c0'}\n\n```{.r .cell-code}\n# Predictors\nx_train_tbl <- bake(rec_obj, new_data = train_tbl)\nx_test_tbl  <- bake(rec_obj, new_data = test_tbl)\n#as.matrix(x_train_tbl)\nx_train_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,977 × 50\n   SeniorCitizen MonthlyCharges TotalCharges gender_Female gender_Male\n           <dbl>          <dbl>        <dbl>         <dbl>       <dbl>\n 1        -0.442          0.143       -0.555        -0.992       0.992\n 2        -0.442          0.639        0.923         1.01       -1.01 \n 3        -0.442          0.216       -1.21         -0.992       0.992\n 4        -0.442         -1.34        -0.194         1.01       -1.01 \n 5        -0.442         -1.48        -1.94         -0.992       0.992\n 6        -0.442          0.817        0.384         1.01       -1.01 \n 7        -0.442          0.189        0.784        -0.992       0.992\n 8        -0.442          0.846        1.04          1.01       -1.01 \n 9        -0.442         -0.293       -0.218         1.01       -1.01 \n10        -0.442         -1.50        -0.574        -0.992       0.992\n# ℹ 5,967 more rows\n# ℹ 45 more variables: Partner_No <dbl>, Partner_Yes <dbl>,\n#   Dependents_No <dbl>, Dependents_Yes <dbl>, tenure_bin1 <dbl>,\n#   tenure_bin2 <dbl>, tenure_bin3 <dbl>, tenure_bin4 <dbl>, tenure_bin5 <dbl>,\n#   tenure_bin6 <dbl>, PhoneService_No <dbl>, PhoneService_Yes <dbl>,\n#   MultipleLines_No <dbl>, MultipleLines_No.phone.service <dbl>,\n#   MultipleLines_Yes <dbl>, InternetService_DSL <dbl>, …\n```\n:::\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-11_cff688833ef04ac1e35e753be86df633'}\n\n```{.r .cell-code}\n# Response variables for training and testing sets\n#y_train_vec <- ifelse( ... )\n#y_test_vec  <- ifelse( ... )\n```\n:::\n\n\n\n## Keras\n# Unfortunately I did not get to install tensorflow properly, so it doesn't work\n## After so many trys...:\n - https://community.rstudio.com/t/error-installation-of-tensorflow-not-found-in-rstudio/67200\n - https://github.com/rstudio/tensorflow\n - https://community.rstudio.com/t/problem-in-configuration-rstudio-with-python/44235/4\n - https://community.rstudio.com/t/keras-error-python-module-tensorflow-keras-was-not-found/93023/2\n - https://stackoverflow.com/questions/44611325/r-keras-package-error-python-module-tensorflow-contrib-keras-python-keras-was-n\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-12_9480f106cabf53aadf3fc9b7bea735a5'}\n\n```{.r .cell-code}\n# Building our Artificial Neural Network\nmodel_keras <- keras_model_sequential()\n\nmodel_keras %>% \n    # First hidden layer\n    layer_dense(\n        units              = 16, \n        kernel_initializer = \"uniform\", \n        activation         = \"relu\", \n        input_shape        = ncol(x_train_tbl)) %>% \n    # Dropout to prevent overfitting\n    layer_dropout(rate = 0.1) %>%\n    # Second hidden layer\n    layer_dense(\n        units              = 16, \n        kernel_initializer = \"uniform\", \n        activation         = \"relu\") %>% \n    # Dropout to prevent overfitting\n    layer_dropout(rate = 0.1) %>%\n    # Output layer\n    layer_dense(\n        units              = 1, \n        kernel_initializer = \"uniform\", \n        activation         = \"sigmoid\") %>% \n    # Compile ANN\n    compile(\n        optimizer = 'adam',\n        loss      = 'binary_crossentropy',\n        metrics   = c('accuracy')\n    )\nmodel_keras\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel: \"sequential\"\n________________________________________________________________________________\n Layer (type)                       Output Shape                    Param #     \n================================================================================\n dense_2 (Dense)                    (None, 16)                      816         \n dropout_1 (Dropout)                (None, 16)                      0           \n dense_1 (Dense)                    (None, 16)                      272         \n dropout (Dropout)                  (None, 16)                      0           \n dense (Dense)                      (None, 1)                       17          \n================================================================================\nTotal params: 1,105\nTrainable params: 1,105\nNon-trainable params: 0\n________________________________________________________________________________\n```\n:::\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-13_426c5c47501854fb5fe9434152cbd894'}\n\n```{.r .cell-code}\n# fit_keras <- fit(\n#     object = model_keras,\n#     x = as.matrix(x_train_tbl),\n#     #y = ,\n#     batch_size = 50,\n#     epochs = 35,\n#     validation_split = 0.3\n#     )\n```\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-14_ef261a42ea96a06b06f6d0214ebecefe'}\n\n```{.r .cell-code}\n # fit_keras\n```\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-15_aa590ce3adae489633d4ff8a1adcb944'}\n\n```{.r .cell-code}\n# plot(fit_keras) +\n#   labs(title = \"Deep Learning Training Results\") +\n#   theme(legend.position  = \"bottom\",\n#         strip.placement  = \"inside\",\n#         strip.background = element_rect(fill = \"#grey\"))\n```\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-16_2fb152d1689e9ace7cf821d64f2a60ca'}\n\n```{.r .cell-code}\n# # Predicted Class\n# yhat_keras_class_vec <- predict_classes(object = model_keras, x = as.matrix(x_test_tbl)) %>%\n#     as.vector()\n# \n# # Predicted Class Probability\n# yhat_keras_prob_vec  <- predict_proba(object = model_keras, x = as.matrix(x_test_tbl)) %>%\n#     as.vector()\n```\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-17_cc25e49a12f3d83a072b2ce62bbd50e6'}\n\n```{.r .cell-code}\n# estimates_keras_tbl <- tibble(\n#     truth      = as.factor(y_test_vec) %>% fct_recode(yes = \"1\", no = \"0\"),\n#     estimate   = as.factor(yhat_keras_class_vec) %>% fct_recode(yes = \"1\", no = \"0\"),\n#     class_prob = yhat_keras_prob_vec\n# )\n# \n# estimates_keras_tbl\n```\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-18_593991e6ff139a63b18ab0fbfebc9988'}\n\n```{.r .cell-code}\n# Confusion Table\n#... %>% ...\n```\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-19_580aeb2b6adcf68d0f663fc267585f36'}\n\n```{.r .cell-code}\n# Accuracy\n#... %>% ...\n```\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-20_e32f521a875363464831b9c59374a2bf'}\n\n```{.r .cell-code}\n# AUC\n#... %>% ...\n```\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-21_f55f3b349454368554293adfbd165ee6'}\n\n```{.r .cell-code}\n# Precision\n# tibble(\n#     precision = ...,\n#     recall    = ...\n# )\n```\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-22_f97ac9d4e323d7ee78ad25ae98637ed6'}\n\n```{.r .cell-code}\n# F1-Statistic\n#estimates_keras_tbl %>% f_meas(truth, estimate, beta = 1)\n```\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-23_46f77b105cc0686a91e4ba0a6f58e0fb'}\n\n```{.r .cell-code}\n#class(model_keras)\n```\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-24_62853dd7180fba6db1f2cc243cffc718'}\n\n```{.r .cell-code}\n# model_type.keras.engine.sequential.Sequential  <- function(x, ...) {\n#     return(\"classification\")\n# }\n```\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-25_1824184728f9a08b86fd7e36c466bfd3'}\n\n```{.r .cell-code}\n# Setup lime::predict_model() function for keras\n# predict_model.keras.engine.sequential.Sequential <- function(x, newdata, type, ...) {\n#     pred <- predict_proba(object = x, x = as.matrix(newdata))\n#     return(data.frame(Yes = pred, No = 1 - pred))\n# }\n```\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-26_36b24bad3d84b12c75b4d6ecb8673540'}\n\n```{.r .cell-code}\n# # Test our predict_model() function\n# predict_model(x = model_keras, newdata = x_test_tbl, type = 'raw') %>%\n#     tibble::as_tibble()\n```\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-27_1a42bb521eb0ebcad0e62c169c6a10fa'}\n\n```{.r .cell-code}\n# # Run lime() on training set\n# explainer <- lime::lime(\n#     ...            = ..., \n#     ...            = ... , \n#     bin_continuous = FALSE)\n```\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-28_191045a25fdf3cefe4e2e6b6b79d2998'}\n\n```{.r .cell-code}\n# explanation <- lime::explain(\n#     x_test_tbl[1:10,], \n#     ...    = ..., \n#     ...    = ..., \n#     ...    = ...,\n#     ...    = ...)\n```\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-29_8df97dcf4708d10c352283fe7a6ac90e'}\n\n```{.r .cell-code}\n# # Feature correlations to Churn\n# corrr_analysis <- x_train_tbl %>%\n#     mutate(Churn = y_train_vec) %>%\n#     correlate() %>%\n#     focus(Churn) %>%\n#     rename(feature = rowname) %>%\n#     arrange(abs(Churn)) %>%\n#     mutate(feature = as_factor(feature)) \n# corrr_analysis\n```\n:::\n\n::: {.cell hash='deepL_cache/html/unnamed-chunk-30_42e6108f36381cb8fddcaef07c98a038'}\n\n```{.r .cell-code}\n# # Correlation visualization\n# corrr_analysis %>%\n#   ggplot(aes(x = ..., y = fct_reorder(..., desc(...)))) +\n#   geom_point() +\n#   \n#   # Positive Correlations - Contribute to churn\n#   geom_segment(aes(xend = ..., yend = ...), \n#                color = \"red\", \n#                data = corrr_analysis %>% filter(... > ...)) +\n#   geom_point(color = \"red\", \n#              data = corrr_analysis %>% filter(... > ...)) +\n#   \n#   # Negative Correlations - Prevent churn\n#   geom_segment(aes(xend = 0, yend = feature), \n#                color = \"#2DC6D6\", \n#                data = ... +\n#   geom_point(color = \"#2DC6D6\", \n#              data = ... +\n#   \n#   # Vertical lines\n#   geom_vline(xintercept = 0, color = \"#f1fa8c\", size = 1, linetype = 2) +\n#   geom_vline( ... ) +\n#   geom_vline( ... ) +\n#   \n#   # Aesthetics\n#   labs( ... )\n```\n:::\n\n\n\nCongratulations! You are done with the 7th challenge!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}