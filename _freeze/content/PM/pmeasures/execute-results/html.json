{
  "hash": "3f121f821f2ff8d68309e455df9a99f2",
  "result": {
    "markdown": "---\ntitle: \"Supervised ML - Regression\"\ndate: \"2023-06-13\"\noutput: \n    html_document:\n        toc: TRUE\n        theme: flatly\n        highlight: tango\n        code_folding: hide\n        df_print: paged\n---\n\n\n\n\n# Challenge Summary\n\nApply all the steps you have learned in this session on the dataset from challenge of the last session (Product Backorders):\n\n# Libraries\n\nLoad the following libraries. \n\n\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-1_0a8a0bf5b296039b1a42dd9df7759bf3'}\n\n```{.r .cell-code}\n# install.packages(\"plotly\")\n\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(broom)\nlibrary(umap)\nlibrary(ggrepel) # Addon for ggplot, so that the labels do not overlap\nlibrary(readxl)\nlibrary(h2o)\n\n# Modeling\nlibrary(parsnip)\n\n# Preprocessing & Sampling\nlibrary(recipes)\nlibrary(rsample)\n\n# Modeling Error Metrics\nlibrary(yardstick)\n\n# Plotting Decision Trees\nlibrary(rpart.plot)\n\n# Performance Visualization \nlibrary(cowplot)\nlibrary(glue)\n```\n:::\n\n\n# Helper functions\n\n\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-2_8bd13e6beec94bc2eb89cff989c28f36'}\n\n```{.r .cell-code}\nextract_h2o_model_name_by_position <- function(h2o_leaderboard, n = 1, verbose = T) {\n  \n  model_name <- h2o_leaderboard %>%\n    as.tibble() %>%\n    slice(n) %>%\n    pull(model_id)\n  \n  if (verbose) message(model_name)\n  \n  return(model_name)\n  \n}\n\n\nload_model_performance_metrics <- function(path, test_tbl) {\n    \n    model_h2o <- h2o.loadModel(path)\n    perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %>%\n        h2o.metric() %>%\n        as_tibble() %>%\n        mutate(auc = h2o.auc(perf_h2o)) %>%\n        select(tpr, fpr, auc)\n    \n}\n\n\nplot_h2o_leaderboard <- function(h2o_leaderboard, order_by = c(\"auc\", \"logloss\"), \n                                 n_max = 20, size = 4, include_lbl = TRUE) {\n\n    # Setup inputs\n    # adjust input so that all formats are working\n    order_by <- tolower(order_by[[1]])\n\n    leaderboard_tbl <- h2o_leaderboard %>%\n        as.tibble() %>%\n        select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% \n        mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n        rownames_to_column(var = \"rowname\") %>%\n        mutate(model_id = paste0(rowname, \". \", model_id) %>% as.factor())\n\n    # Transformation\n    if (order_by == \"auc\") {\n\n        data_transformed_tbl <- leaderboard_tbl %>%\n            slice(1:n_max) %>%\n            mutate(\n                model_id   = as_factor(model_id) %>% reorder(auc),\n                model_type = as.factor(model_type)\n            ) %>%\n                pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       )\n\n    } else if (order_by == \"logloss\") {\n\n        data_transformed_tbl <- leaderboard_tbl %>%\n            slice(1:n_max) %>%\n            mutate(\n                model_id   = as_factor(model_id) %>% reorder(logloss) %>% fct_rev(),\n                model_type = as.factor(model_type)\n            ) %>%\n            pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       )\n\n    } else {\n        # If nothing is supplied\n        stop(paste0(\"order_by = '\", order_by, \"' is not a permitted option.\"))\n    }\n\n    # Visualization\n    g <- data_transformed_tbl %>%\n        ggplot(aes(value, model_id, color = model_type)) +\n        geom_point(size = size) +\n        facet_wrap(~ key, scales = \"free_x\") +\n        labs(title = \"Leaderboard Metrics\",\n             subtitle = paste0(\"Ordered by: \", toupper(order_by)),\n             y = \"Model Postion, Model ID\", x = \"\")\n\n    if (include_lbl) g <- g + geom_label(aes(label = round(value, 2), \n                                             hjust = \"inward\"))\n\n    return(g)\n\n}\n\nplot_h2o_performance <- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n                                 max_models = 3, size = 1.5) {\n    \n    # Inputs\n    \n    leaderboard_tbl <- h2o_leaderboard %>%\n        as_tibble() %>%\n        slice(1:max_models)\n    \n    newdata_tbl <- newdata %>%\n        as_tibble()\n    \n    # Selecting the first, if nothing is provided\n    order_by      <- tolower(order_by[[1]]) \n    \n    # Convert string stored in a variable to column name (symbol)\n    order_by_expr <- rlang::sym(order_by)\n\n    # Turn of the progress bars ( opposite h2o.show_progress())\n    h2o.no_progress()\n    \n    # 1. Model metrics\n    \n    get_model_performance_metrics <- function(model_id, test_tbl) {\n        \n        model_h2o <- h2o.getModel(model_id)\n        perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))\n        \n        perf_h2o %>%\n            h2o.metric() %>%\n            as.tibble() %>%\n            select(threshold, tpr, fpr, precision, recall)\n        \n    }\n    \n    model_metrics_tbl <- leaderboard_tbl %>%\n        mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %>%\n        unnest(cols = metrics) %>%\n        mutate(\n          model_id = as_factor(model_id) %>% \n                      # programmatically reorder factors depending on order_by\n                      fct_reorder(!! order_by_expr, \n                                  .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n          auc      = auc %>% \n                      round(3) %>% \n                      as.character() %>% \n                      as_factor() %>% \n                      fct_reorder(as.numeric(model_id)),\n          logloss  = logloss %>% \n                      round(4) %>% \n                      as.character() %>% \n                      as_factor() %>% \n                      fct_reorder(as.numeric(model_id))\n        )\n    \n    \n    # 1A. ROC Plot\n    \n    p1 <- model_metrics_tbl %>%\n        ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n        theme(legend.direction = \"vertical\") \n        \n    \n    # 1B. Precision vs Recall\n    \n    p2 <- model_metrics_tbl %>%\n        ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n        theme(legend.position = \"none\") \n    \n    \n    # 2. Gain / Lift\n    \n    get_gain_lift <- function(model_id, test_tbl) {\n        \n        model_h2o <- h2o.getModel(model_id)\n        perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n        \n        perf_h2o %>%\n            h2o.gainsLift() %>%\n            as.tibble() %>%\n            select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n        \n    }\n    \n    gain_lift_tbl <- leaderboard_tbl %>%\n        mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %>%\n        unnest(cols = metrics) %>%\n        mutate(\n            model_id = as_factor(model_id) %>% \n                fct_reorder(!! order_by_expr, \n                            .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n            auc  = auc %>% \n                round(3) %>% \n                as.character() %>% \n                as_factor() %>% \n                fct_reorder(as.numeric(model_id)),\n            logloss = logloss %>% \n                round(4) %>% \n                as.character() %>% \n                as_factor() %>% \n                fct_reorder(as.numeric(model_id))\n        ) %>%\n        rename(\n            gain = cumulative_capture_rate,\n            lift = cumulative_lift\n        ) \n    \n    # 2A. Gain Plot\n    \n    p3 <- gain_lift_tbl %>%\n        ggplot(aes(cumulative_data_fraction, gain, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size,) +\n        geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Gain\",\n             x = \"Cumulative Data Fraction\", y = \"Gain\") +\n        theme(legend.position = \"none\")\n    \n    # 2B. Lift Plot\n    \n    p4 <- gain_lift_tbl %>%\n        ggplot(aes(cumulative_data_fraction, lift, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Lift\",\n             x = \"Cumulative Data Fraction\", y = \"Lift\") +\n        theme(legend.position = \"none\") \n    \n    \n    # Combine using cowplot\n    \n    # cowplot::get_legend extracts a legend from a ggplot object\n    p_legend <- get_legend(p1)\n    # Remove legend from p1\n    p1 <- p1 + theme(legend.position = \"none\")\n    \n    # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n    p <- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n    \n    # cowplot::ggdraw() sets up a drawing layer\n    p_title <- ggdraw() + \n    \n        # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n        draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n                   color = \"#2C3E50\")\n    \n    p_subtitle <- ggdraw() + \n        draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n                   color = \"#2C3E50\")\n    \n    # Combine everything\n    ret <- plot_grid(p_title, p_subtitle, p, p_legend, \n    \n                     # Adjust the relative spacing, so that the legends always fits\n                     ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n    \n    h2o.show_progress()\n    \n    return(ret)\n    \n}\n```\n:::\n\n\n# Data\n\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-3_160d32cfc8587c09fa0e3dd2ad156fd9'}\n\n```{.r .cell-code}\n# Data set\nproduct_tbl <- read_csv(\"product_backorders.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 19053 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\ndbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nglimpse(product_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 19,053\nColumns: 23\n$ sku               <dbl> 1113121, 1113268, 1113874, 1114222, 1114823, 1115453…\n$ national_inv      <dbl> 0, 0, 20, 0, 0, 55, -34, 4, 2, -7, 1, 2, 0, 0, 0, 0,…\n$ lead_time         <dbl> 8, 8, 2, 8, 12, 8, 8, 9, 8, 8, 8, 8, 12, 2, 12, 4, 2…\n$ in_transit_qty    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n$ forecast_3_month  <dbl> 6, 2, 45, 9, 31, 216, 120, 43, 4, 56, 2, 5, 5, 54, 4…\n$ forecast_6_month  <dbl> 6, 3, 99, 14, 31, 360, 240, 67, 6, 96, 4, 9, 6, 72, …\n$ forecast_9_month  <dbl> 6, 4, 153, 21, 31, 492, 240, 115, 9, 112, 6, 13, 9, …\n$ sales_1_month     <dbl> 0, 1, 16, 5, 7, 30, 83, 5, 1, 13, 0, 1, 0, 0, 1, 0, …\n$ sales_3_month     <dbl> 4, 2, 42, 17, 15, 108, 122, 22, 5, 30, 2, 5, 4, 0, 3…\n$ sales_6_month     <dbl> 9, 3, 80, 36, 33, 275, 144, 40, 6, 56, 3, 8, 5, 0, 4…\n$ sales_9_month     <dbl> 12, 3, 111, 43, 47, 340, 165, 58, 9, 76, 4, 11, 6, 0…\n$ min_bank          <dbl> 0, 0, 10, 0, 2, 51, 33, 4, 2, 0, 0, 0, 3, 4, 0, 0, 0…\n$ potential_issue   <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n$ pieces_past_due   <dbl> 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ perf_6_month_avg  <dbl> 0.90, 0.96, 0.81, 0.96, 0.98, 0.00, 1.00, 0.69, 1.00…\n$ perf_12_month_avg <dbl> 0.89, 0.97, 0.88, 0.98, 0.98, 0.00, 0.97, 0.68, 0.95…\n$ local_bo_qty      <dbl> 0, 0, 0, 0, 0, 0, 34, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, …\n$ deck_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n$ oe_constraint     <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n$ ppap_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No…\n$ stop_auto_buy     <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n$ rev_stop          <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n$ went_on_backorder <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n```\n:::\n\n```{.r .cell-code}\nproduct_proc_tbl <- product_tbl %>%\n  mutate_if(is.character, as.factor)\n\nsplit_product_tbl <- initial_split(product_proc_tbl, prop = 0.8)\ntrain_tbl <- training(split_product_tbl)\ntest_tbl <- testing(split_product_tbl)\n```\n:::\n\n\n## Specify the response and predictor variables\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-4_a97d065b33e4b2763be16785a8064fc7'}\n\n```{.r .cell-code}\n# Try Ctrl+Shift+F10, if a cache error occurs with prep\nrecipe_product <- \n  recipe(went_on_backorder ~ ., data = train_tbl) %>%\n  step_zv(all_predictors()) %>%\n  update_role(sku, new_role = \"ID\") %>%\n  prep()\n\ntrain_bake <- bake(recipe_product, new_data = train_tbl)\ntest_bake <- bake(recipe_product, new_data = test_tbl)\n```\n:::\n\n## AutoML\n\n::: {.cell hash='pmeasures_cache/html/beginH2o_9a5775b6452e5379b60299e9b64f8dbf'}\n\n```{.r .cell-code}\nh2o.init()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Connection successful!\n\nR is connected to the H2O cluster: \n    H2O cluster uptime:         4 minutes 19 seconds \n    H2O cluster timezone:       Europe/Berlin \n    H2O data parsing timezone:  UTC \n    H2O cluster version:        3.40.0.4 \n    H2O cluster version age:    1 month and 16 days \n    H2O cluster name:           H2O_started_from_R_docla_gzs042 \n    H2O cluster total nodes:    1 \n    H2O cluster total memory:   3.60 GB \n    H2O cluster total cores:    8 \n    H2O cluster allowed cores:  8 \n    H2O cluster healthy:        TRUE \n    H2O Connection ip:          localhost \n    H2O Connection port:        54321 \n    H2O Connection proxy:       NA \n    H2O Internal Security:      FALSE \n    R Version:                  R version 4.3.0 (2023-04-21 ucrt) \n```\n:::\n\n```{.r .cell-code}\nsplit_h2o <- h2o.splitFrame(as.h2o(train_bake), ratios = c(0.8), seed = 2597)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o <- as.h2o(test_bake)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\n# Set the target and predictors\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), y)\n```\n:::\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-5_e4220a24a40846b5d7a346e66a73544e'}\n\n```{.r .cell-code}\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 10 \n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |===                                                                   |   4%\n14:54:14.755: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n14:54:14.783: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |=============                                                         |  19%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |=======================================================               |  79%\n  |                                                                            \n  |============================================================          |  86%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n:::\n\n\n## Save best Model\n\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-6_60952a27c948add1f20b46a12408f995'}\n\n```{.r .cell-code}\nh2o_leaderboard <- automl_models_h2o@leaderboard\nh2o_leaderboard\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                 model_id       auc   logloss\n1 StackedEnsemble_BestOfFamily_2_AutoML_1_20230613_145414 0.9507159 0.1716474\n2 StackedEnsemble_BestOfFamily_1_AutoML_1_20230613_145414 0.9495340 0.1733543\n3                          GBM_1_AutoML_1_20230613_145414 0.9490709 0.1892431\n4                          GBM_3_AutoML_1_20230613_145414 0.8214814 0.3269969\n5                          DRF_1_AutoML_1_20230613_145414 0.8160505 0.6769504\n6                          GLM_1_AutoML_1_20230613_145414 0.7650390 0.3170280\n      aucpr mean_per_class_error      rmse        mse\n1 0.7302760            0.1366178 0.2267358 0.05140913\n2 0.7236724            0.1436277 0.2280016 0.05198475\n3 0.7300887            0.1423506 0.2342703 0.05488256\n4 0.4242645            0.3160760 0.3076090 0.09462329\n5 0.4820170            0.2478435 0.2827942 0.07997257\n6 0.2920050            0.3227629 0.3049366 0.09298635\n\n[8 rows x 7 columns] \n```\n:::\n:::\n\n\n\n## Predict using Leader\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-7_41d13762cc93889c3d56be408b60f23b'}\n\n```{.r .cell-code}\nprediction_tbl <- \n  h2o_leaderboard %>% \n  extract_h2o_model_name_by_position(1) %>% \n  h2o.getModel() %>% \n  h2o.predict(newdata = test_h2o) %>%\n  as.tibble()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nStackedEnsemble_BestOfFamily_2_AutoML_1_20230613_145414\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ntest_bake <- test_bake %>%\n  mutate(\"ID\" = row_number())\n\nprediction_tbl <- prediction_tbl %>%\n  mutate(\"ID\" = row_number()) %>%\n  left_join(test_bake) %>%\n  select(-ID)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(ID)`\n```\n:::\n:::\n\n\n# Challenge\n\n## Leaderboard visualization\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-8_c15e5711fc85c69fa5124b56df1388b2'}\n\n```{.r .cell-code}\n#fails when rendering website, I dont know why\n#plot_h2o_leaderboard(h2o_leaderboard)\n```\n:::\n\n\n## Tune a model with grid search\n\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-9_41b16a0ae048ba370a14ccf0dc81af78'}\n\n```{.r .cell-code}\n#deeplearning_h2o <- h2o.loadModel(\"../Models/DeepLearning_1_AutoML_4_20220611_123045\")\n\n#h2o.performance(deeplearning_h2o, newdata = test_h2o)\n```\n:::\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-10_ebb223cd0b9854babe2d7f99c4165719'}\n\n```{.r .cell-code}\ndeeplearning_grid_01 <- h2o.grid(\n\n    # See help page for available algos\n    algorithm = \"deeplearning\",\n    \n    # I just use the same as the object\n    grid_id = \"deeplearning_grid_01\",\n    \n    # The following is for ?h2o.deeplearning()\n    # predictor and response variables\n    x = x,\n    y = y,\n    \n    # training and validation frame and crossfold validation\n    training_frame   = train_h2o,\n    validation_frame = valid_h2o,\n    nfolds = 5,\n    \n    # Hyperparamters: Use deeplearning_h2o@allparameters to see all\n    hyper_params = list(\n        # Use some combinations (the first one was the original)\n        hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n        epochs = c(10, 50, 100)\n    )\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ndeeplearning_grid_01\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nH2O Grid Details\n================\n\nGrid ID: deeplearning_grid_01 \nUsed hyper parameters: \n  -  epochs \n  -  hidden \nNumber of models: 18 \nNumber of failed models: 0 \n\nHyper-Parameter Search Summary: ordered by increasing logloss\n      epochs       hidden                     model_ids logloss\n1  103.99630 [10, 10, 10]  deeplearning_grid_01_model_3 0.26093\n2   51.99952 [20, 20, 20]  deeplearning_grid_01_model_8 0.27265\n3  104.01457 [50, 20, 10]  deeplearning_grid_01_model_6 0.27837\n4   52.00589 [10, 10, 10] deeplearning_grid_01_model_11 0.28012\n5   51.98690 [10, 10, 10]  deeplearning_grid_01_model_2 0.28179\n6   52.01273 [50, 20, 10]  deeplearning_grid_01_model_5 0.28422\n7  104.00286 [50, 20, 10] deeplearning_grid_01_model_15 0.28521\n8  104.01588 [20, 20, 20]  deeplearning_grid_01_model_9 0.28619\n9   51.99247 [20, 20, 20] deeplearning_grid_01_model_17 0.28775\n10 104.02056 [20, 20, 20] deeplearning_grid_01_model_18 0.29248\n11 104.00341 [10, 10, 10] deeplearning_grid_01_model_12 0.29276\n12  51.98806 [50, 20, 10] deeplearning_grid_01_model_14 0.30265\n13  10.38295 [20, 20, 20]  deeplearning_grid_01_model_7 0.30981\n14  10.38954 [10, 10, 10]  deeplearning_grid_01_model_1 0.31754\n15  10.39080 [10, 10, 10] deeplearning_grid_01_model_10 0.32127\n16  10.39515 [50, 20, 10]  deeplearning_grid_01_model_4 0.32278\n17  10.39997 [50, 20, 10] deeplearning_grid_01_model_13 0.32396\n18  10.40384 [20, 20, 20] deeplearning_grid_01_model_16 0.32500\n```\n:::\n:::\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-11_026fb589ac0ab7717d75e6214d414dd6'}\n\n```{.r .cell-code}\nh2o.getGrid(grid_id = \"deeplearning_grid_01\", sort_by = \"auc\", decreasing = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nH2O Grid Details\n================\n\nGrid ID: deeplearning_grid_01 \nUsed hyper parameters: \n  -  epochs \n  -  hidden \nNumber of models: 18 \nNumber of failed models: 0 \n\nHyper-Parameter Search Summary: ordered by decreasing auc\n      epochs       hidden                     model_ids     auc\n1  103.99630 [10, 10, 10]  deeplearning_grid_01_model_3 0.88079\n2  104.01588 [20, 20, 20]  deeplearning_grid_01_model_9 0.86915\n3  104.01457 [50, 20, 10]  deeplearning_grid_01_model_6 0.86529\n4  104.02056 [20, 20, 20] deeplearning_grid_01_model_18 0.86355\n5   51.99952 [20, 20, 20]  deeplearning_grid_01_model_8 0.85595\n6  104.00286 [50, 20, 10] deeplearning_grid_01_model_15 0.85194\n7   51.98690 [10, 10, 10]  deeplearning_grid_01_model_2 0.84981\n8   52.01273 [50, 20, 10]  deeplearning_grid_01_model_5 0.84975\n9  104.00341 [10, 10, 10] deeplearning_grid_01_model_12 0.84794\n10  52.00589 [10, 10, 10] deeplearning_grid_01_model_11 0.83653\n11  51.99247 [20, 20, 20] deeplearning_grid_01_model_17 0.83505\n12  51.98806 [50, 20, 10] deeplearning_grid_01_model_14 0.81182\n13  10.38295 [20, 20, 20]  deeplearning_grid_01_model_7 0.78278\n14  10.38954 [10, 10, 10]  deeplearning_grid_01_model_1 0.76549\n15  10.39515 [50, 20, 10]  deeplearning_grid_01_model_4 0.76327\n16  10.39080 [10, 10, 10] deeplearning_grid_01_model_10 0.76260\n17  10.40384 [20, 20, 20] deeplearning_grid_01_model_16 0.76159\n18  10.39997 [50, 20, 10] deeplearning_grid_01_model_13 0.74774\n```\n:::\n:::\n\n## Visualize the trade of between the precision and the recall and the optimal threshold\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-12_1e8ccebcd3bcdf01d4e45202aa58b41e'}\n\n```{.r .cell-code}\ndeeplearning_grid_01_model_6 <- h2o.getModel(\"deeplearning_grid_01_model_6\")\ndeeplearning_grid_01_model_6 %>% h2o.auc(train = T, valid = T, xval = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    train     valid      xval \n0.9050487 0.9006460 0.8652939 \n```\n:::\n\n```{.r .cell-code}\ndeeplearning_grid_01_model_6 %>%\n    h2o.performance(newdata = test_h2o)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nH2OBinomialMetrics: deeplearning\n\nMSE:  0.07089941\nRMSE:  0.2662694\nLogLoss:  0.2349595\nMean Per-Class Error:  0.2229029\nAUC:  0.9116056\nAUCPR:  0.5926501\nGini:  0.8232113\n\nConfusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n         No Yes    Error       Rate\nNo     3197 171 0.050772  =171/3368\nYes     175 268 0.395034   =175/443\nTotals 3372 439 0.090790  =346/3811\n\nMaximum Metrics: Maximum metrics at their respective thresholds\n                        metric threshold       value idx\n1                       max f1  0.202426    0.607710 198\n2                       max f2  0.075741    0.697984 283\n3                 max f0point5  0.287192    0.612536 162\n4                 max accuracy  0.287192    0.910522 162\n5                max precision  0.736350    0.860465  32\n6                   max recall  0.000438    1.000000 397\n7              max specificity  0.999815    0.999703   0\n8             max absolute_mcc  0.202426    0.556383 198\n9   max min_per_class_accuracy  0.070517    0.839729 288\n10 max mean_per_class_accuracy  0.071393    0.842133 287\n11                     max tns  0.999815 3367.000000   0\n12                     max fns  0.999815  443.000000   0\n13                     max fps  0.000073 3368.000000 399\n14                     max tps  0.000438  443.000000 397\n15                     max tnr  0.999815    0.999703   0\n16                     max fnr  0.999815    1.000000   0\n17                     max fpr  0.000073    1.000000 399\n18                     max tpr  0.000438    1.000000 397\n\nGains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n```\n:::\n\n```{.r .cell-code}\ndeeplearning_grid_01_model_6 %>%\n  h2o.saveModel(path = \"../Models\", force = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"S:\\\\University\\\\Business Data Machine Learning\\\\ss23-bdml-Engeloid\\\\content\\\\Models\\\\deeplearning_grid_01_model_6\"\n```\n:::\n:::\n\n\n## H2o Performance\n\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-13_bad9a6394cb43c6e3caa5f5dfba41216'}\n\n```{.r .cell-code}\nstacked_ensemble_h2o <-\n  h2o.loadModel(\"../Models/StackedEnsemble_BestOfFamily_1_AutoML_1_20230613_132849\")\n```\n:::\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-14_a6f2e45a27361eb1c260622dbb840930'}\n\n```{.r .cell-code}\ntheme_new <- theme(\n      legend.position  = \"bottom\",\n      legend.key       = element_blank(),,\n      panel.background = element_rect(fill   = \"transparent\"),\n      panel.border     = element_rect(color = \"black\", fill = NA, size = 0.7),\n      panel.grid.major = element_line(color = \"grey\", size = 0.4)\n      ) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n```\n:::\n:::\n\n\n## Precision, recall and the optimal Threshold\n\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-15_6a3bd767caa0ae65fb16d6702c4840fa'}\n\n```{.r .cell-code}\nperformance_h2o <-\n  h2o.performance(stacked_ensemble_h2o, newdata = test_h2o)\n\nperformance_tbl <-\n  performance_h2o %>%\n  h2o.metric() %>%\n  as.tibble()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n```\n:::\n\n```{.r .cell-code}\nperformance_tbl %>%\n    ggplot(aes(x = threshold)) +\n    geom_line(aes(y = precision), color = \"green\", size = 1) +\n    geom_line(aes(y = recall), color = \"red\", size = 1) +\n    \n    # Insert line where precision and recall are harmonically optimized\n    geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n    labs(title = \"Precision vs Recall\", y = \"value\") +\n    theme_new\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](pmeasures_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n## ROC Plot\n\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-16_7e4a8bd3bf74386feb3bdde989c2d15f'}\n\n```{.r .cell-code}\nmodel_metrics_tbl <- fs::dir_info(path = \"../Models/\") %>%\n    select(path) %>%\n    mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %>%\n    unnest(cols = metrics)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n:::\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-17_15bdcfb03832323e9a474857a9933dfb'}\n\n```{.r .cell-code}\nmodel_metrics_tbl %>%\n    mutate(\n        # Extract the model names\n        path = str_split(path, pattern = \"/\", simplify = T)[,3] %>% as_factor(),\n        auc  = auc %>% round(3) %>% as.character() %>% as_factor()\n        ) %>%\n    ggplot(aes(fpr, tpr, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n    \n    # just for demonstration purposes\n    geom_abline(color = \"red\", linetype = \"dotted\") +\n    \n    theme_new +\n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"ROC Plot\",\n        subtitle = \"Performance of 3 Top Performing Models\"\n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](pmeasures_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## Precision vs Recall Plot\n# Unfortuantely, the following does not run when rendering the website, only runs locally\n Ctrl + Shift + C for block comments\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-18_aa4d6b2062aab35bc2d6ed0dc1fd6e34'}\n\n```{.r .cell-code}\n# model_metrics_tbl %>%\n#     mutate(\n#         # Extract the model names\n#         path = str_split(path, pattern = \"/\", simplify = T)[,3] %>% as_factor(),\n#         auc  = auc %>% round(3) %>% as.character() %>% as_factor()\n#     ) %>%\n#     ggplot(aes(recall, precision, color = path, linetype = auc)) +\n#     geom_line(size = 1) +\n#     theme_new +\n#     theme(\n#         legend.direction = \"vertical\",\n#     ) +\n#     labs(\n#         title = \"Precision vs Recall Plot\",\n#         subtitle = \"Performance of 3 Top Performing Models\"\n#     )\n```\n:::\n\n\n## Gain Plot\n\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-19_ed71596c63f7029bc9ea42d5534d6380'}\n\n```{.r .cell-code}\ngain_lift_tbl <- performance_h2o %>%\n    h2o.gainsLift() %>%\n    as.tibble()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n```\n:::\n\n```{.r .cell-code}\n## Gain Chart\n\ngain_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"lift\")) %>%\n    mutate(baseline = cumulative_data_fraction) %>%\n    rename(gain     = cumulative_capture_rate) %>%\n    # prepare the data for the plotting (for the color and group aesthetics)\n    pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Gain Chart of Stacked Ensemble\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Gain\"\n    ) +\n    theme_new\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](pmeasures_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## Lift Plot\n\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-20_c376fac30f7c763f2f27c0efc4b8bc7a'}\n\n```{.r .cell-code}\n## Lift Plot\n\nlift_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"capture\")) %>%\n    mutate(baseline = 1) %>%\n    rename(lift = cumulative_lift) %>%\n    pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1) +\n    labs(\n        title = \"Lift Chart of Stacked Ensemble\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Lift\"\n    ) +\n    theme_new\n```\n\n::: {.cell-output-display}\n![](pmeasures_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n## Dashboard with cowplot\n# Unfortuantely, the following does not run when rendering the website, only runs locally\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-21_b14213500027dc7fef8d9d2f1ec07dd8'}\n\n```{.r .cell-code}\n# leaderboard_tbl <-\n#   h2o_leaderboard %>%\n#   as.tibble() %>%\n#   slice(1,5,10,14)\n# leaderboard_tbl\n```\n:::\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-22_1dfc3d086131a6145e633b0eb060fa42'}\n\n```{.r .cell-code}\n#plot_h2o_performance(leaderboard_tbl, test_tbl, max_models = 5, size = 0.8)\n```\n:::\n\n\n## Shutdown\n\n\n::: {.cell hash='pmeasures_cache/html/unnamed-chunk-23_a6e7571aeb77576e01f9621e706d91f5'}\n\n```{.r .cell-code}\nh2o.shutdown(prompt = FALSE)\n```\n:::\n\n \nCongratulations! You are done with the 5th challenge!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}